/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import base.UtilisateurDAO;
import domaine.Utilisateur;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 *
 * @author Edouard Diep
 */
public class FrmPasswordForgotten extends javax.swing.JDialog {

    private static final String TXT_USERNAME = "Nom d'utilisateur";
    private static final String TXT_PASSWORD = "Nouveau mot de passe";
    private static final String TXT_CONFIRM_PASS = "Confirmer le mot de passe";
    private static final String TXT_USERNAME_ERROR = "Erreur : L'utilisateur doit au moins contenir une lettre !";
    private static final String TXT_FIELD_ERROR = "Erreur : Veuillez remplir tous les champs !";
    private static final String TXT_PASSWORD_ERROR = "Erreur : les mots de passe ne correspondent pas !";
    private static final String TXT_UNEXISTING_USER_ERROR = "Erreur : L'utilisateur n'est pas reconnu !";
    private static final String TXT_CONFIRM_RESET = "Votre mot de passe a bien été mis à jour !";
    private static final String LETTER_REGEX_PATTERN = ".*[a-zA-Z].*";

    private ArrayList<Utilisateur> lstUtilisateurs;
    private FrmLogin frmLogin;

    /**
     * Creates new form FrmPasswordForgotten
     */
    public FrmPasswordForgotten(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();
        setStartUpConfig(); // setter de la configuration initiale lors de l'ouverture de la fenêtre de l'application
        loadUsers();
        frmLogin = (FrmLogin)parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPassForgot = new javax.swing.JLabel();
        lblNewPass = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        btnResetPass = new javax.swing.JButton();
        tfNewPass = new javax.swing.JPasswordField();
        lblErreur = new javax.swing.JLabel();
        tfPassConfirm = new javax.swing.JPasswordField();
        imgError = new javax.swing.JLabel();
        imgBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Réinitialiser le mot de passe");
        setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{lblPassForgot, tfUsername, tfNewPass, tfPassConfirm, btnResetPass})
        );
        setLocation(new java.awt.Point(700, 300));
        setMaximumSize(new java.awt.Dimension(439, 339));
        setMinimumSize(new java.awt.Dimension(439, 339));
        setPreferredSize(new java.awt.Dimension(400, 339));
        setResizable(false);
        getContentPane().setLayout(null);

        lblPassForgot.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPassForgot.setText("pour réinitialiser votre mot de passe :");
        getContentPane().add(lblPassForgot);
        lblPassForgot.setBounds(180, 40, 260, 20);

        lblNewPass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNewPass.setText("Compléter les champs suivants");
        getContentPane().add(lblNewPass);
        lblNewPass.setBounds(180, 20, 250, 20);

        tfUsername.setForeground(java.awt.Color.lightGray);
        tfUsername.setText("Nom d'utilisateur");
        tfUsername.setToolTipText("Identifiant");
        tfUsername.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tfUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfUsernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfUsernameFocusLost(evt);
            }
        });
        tfUsername.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfUsernameMouseClicked(evt);
            }
        });
        tfUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfUsernameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfUsernameKeyReleased(evt);
            }
        });
        getContentPane().add(tfUsername);
        tfUsername.setBounds(180, 70, 220, 30);

        btnResetPass.setText("Réinitialiser le mot de passe");
        btnResetPass.setToolTipText("Valide et enregistre le nouveau mot de passe");
        btnResetPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetPassActionPerformed(evt);
            }
        });
        getContentPane().add(btnResetPass);
        btnResetPass.setBounds(210, 190, 190, 23);

        tfNewPass.setForeground(java.awt.Color.lightGray);
        tfNewPass.setText("Nouveau mot de passe");
        tfNewPass.setToolTipText("Mot de passe");
        tfNewPass.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfNewPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfNewPassFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfNewPassFocusLost(evt);
            }
        });
        tfNewPass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfNewPassMouseClicked(evt);
            }
        });
        tfNewPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNewPassKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfNewPassKeyReleased(evt);
            }
        });
        getContentPane().add(tfNewPass);
        tfNewPass.setBounds(180, 120, 220, 30);

        lblErreur.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblErreur.setForeground(new java.awt.Color(255, 255, 255));
        lblErreur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblErreur);
        lblErreur.setBounds(10, 270, 430, 40);

        tfPassConfirm.setForeground(java.awt.Color.lightGray);
        tfPassConfirm.setText("Confirmer le mot de passe");
        tfPassConfirm.setToolTipText("Confirmer le mot de passe");
        tfPassConfirm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfPassConfirm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfPassConfirmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfPassConfirmFocusLost(evt);
            }
        });
        tfPassConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfPassConfirmMouseClicked(evt);
            }
        });
        tfPassConfirm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPassConfirmKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPassConfirmKeyReleased(evt);
            }
        });
        getContentPane().add(tfPassConfirm);
        tfPassConfirm.setBounds(180, 150, 220, 30);

        imgError.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        getContentPane().add(imgError);
        imgError.setBounds(190, 210, 70, 60);

        imgBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg_frmPassForgot.png"))); // NOI18N
        getContentPane().add(imgBackGround);
        imgBackGround.setBounds(0, 0, 440, 340);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfUsernameFocusGained
        if (!isFilledTF(tfUsername, TXT_USERNAME)) {
            setCaretTF(tfUsername);
        }
    }//GEN-LAST:event_tfUsernameFocusGained

    private void tfUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfUsernameFocusLost
        addPlaceHolder(tfUsername, TXT_USERNAME);
    }//GEN-LAST:event_tfUsernameFocusLost

    private void btnResetPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetPassActionPerformed
        //try {
            if (resetOk()) {
                int userNo = 0;
                for(Utilisateur u : lstUtilisateurs){
                    if(u.getUsername().equals(tfUsername.getText())){
                        userNo = u.getNo();
                    }
                }
                try {
                    UtilisateurDAO.updatePassword(userNo, tfNewPass.getText());
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                this.dispose();
                frmLogin.setLblConfirmation(TXT_CONFIRM_RESET);
            }
    }//GEN-LAST:event_btnResetPassActionPerformed

    private void tfNewPassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNewPassFocusGained
        if (!isFilledTF(tfNewPass, TXT_PASSWORD)) {
            setCaretTF(tfNewPass);
        }
    }//GEN-LAST:event_tfNewPassFocusGained

    private void tfPassConfirmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPassConfirmFocusGained
        if (!isFilledTF(tfPassConfirm, TXT_CONFIRM_PASS)) {
            setCaretTF(tfPassConfirm);
        }
    }//GEN-LAST:event_tfPassConfirmFocusGained

    private void tfUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfUsernameKeyPressed
        if (tfUsername.getText().equals(TXT_USERNAME) && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || tfUsername.getText().equals(TXT_USERNAME) && evt.getKeyCode() == KeyEvent.VK_DELETE) {
            evt.consume();
            return;
        }
        removePlaceHolder(tfUsername, TXT_USERNAME);
        tfUsername.setForeground(Color.black);
    }//GEN-LAST:event_tfUsernameKeyPressed

    private void tfUsernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfUsernameKeyReleased
        if (tfUsername.getText().length() == 0) {
            addPlaceHolder(tfUsername, TXT_USERNAME);
            tfUsername.setCaretPosition(0);
        }
    }//GEN-LAST:event_tfUsernameKeyReleased

    private void tfUsernameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfUsernameMouseClicked
        if (!isFilledTF(tfUsername, TXT_USERNAME)) {
            setCaretTF(tfUsername);
        }
    }//GEN-LAST:event_tfUsernameMouseClicked

    private void tfNewPassFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNewPassFocusLost
        setPfFocusLostAction(tfNewPass, TXT_PASSWORD);
    }//GEN-LAST:event_tfNewPassFocusLost

    private void tfNewPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNewPassKeyPressed
        setPfKeyPressedAction(tfNewPass, TXT_PASSWORD, evt);
    }//GEN-LAST:event_tfNewPassKeyPressed

    private void tfNewPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNewPassKeyReleased
        setPfKeyReleasedAction(tfNewPass, TXT_PASSWORD);
    }//GEN-LAST:event_tfNewPassKeyReleased

    private void tfNewPassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfNewPassMouseClicked
        if (!isFilledTF(tfNewPass, TXT_PASSWORD)) {
            setCaretTF(tfNewPass);
        }
    }//GEN-LAST:event_tfNewPassMouseClicked

    private void tfPassConfirmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPassConfirmFocusLost
        setPfFocusLostAction(tfPassConfirm, TXT_CONFIRM_PASS);
    }//GEN-LAST:event_tfPassConfirmFocusLost

    private void tfPassConfirmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPassConfirmKeyPressed
        setPfKeyPressedAction(tfPassConfirm, TXT_CONFIRM_PASS, evt);
    }//GEN-LAST:event_tfPassConfirmKeyPressed

    private void tfPassConfirmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPassConfirmKeyReleased
        setPfKeyReleasedAction(tfPassConfirm, TXT_CONFIRM_PASS);
    }//GEN-LAST:event_tfPassConfirmKeyReleased

    private void tfPassConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfPassConfirmMouseClicked
        if (!isFilledTF(tfPassConfirm, TXT_CONFIRM_PASS)) {
            setCaretTF(tfPassConfirm);
        }
    }//GEN-LAST:event_tfPassConfirmMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPasswordForgotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPasswordForgotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPasswordForgotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPasswordForgotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmPasswordForgotten dialog;
                try {
                    dialog = new FrmPasswordForgotten(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnResetPass;
    private javax.swing.JLabel imgBackGround;
    private javax.swing.JLabel imgError;
    private javax.swing.JLabel lblErreur;
    private javax.swing.JLabel lblNewPass;
    private javax.swing.JLabel lblPassForgot;
    private javax.swing.JPasswordField tfNewPass;
    private javax.swing.JPasswordField tfPassConfirm;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables
    /**
     * Méthode permettant de valider plusieurs textfields afin de confirmer la
     * validation de la fenêtre pour l'action du bouton "btnReset".
     */
    private boolean resetOk() {
        Utilisateur u = new Utilisateur(tfUsername.getText(), tfNewPass.getText());
        if (!tfUsername.getText().trim().matches(LETTER_REGEX_PATTERN)) {
            imgError.setVisible(true);
            lblErreur.setText(TXT_USERNAME_ERROR);
            lblErreur.setVisible(true);
            tfUsername.setForeground(Color.red);
            return false;
        } else if (tfUsername.getText().equals(TXT_USERNAME) || tfPassConfirm.getText().equals(TXT_PASSWORD) || tfNewPass.getText().equals(TXT_CONFIRM_PASS) || tfUsername.getText().length() == 0 || tfNewPass.getText().length() == 0 || tfPassConfirm.getText().length() == 0) {
            imgError.setVisible(true);
            lblErreur.setText(TXT_FIELD_ERROR);
            lblErreur.setVisible(true);
            return false;
        } else if (!tfNewPass.getText().equals(tfPassConfirm.getText())) {
            imgError.setVisible(true);
            lblErreur.setText(TXT_PASSWORD_ERROR);
            tfNewPass.setText("");
            tfPassConfirm.setText("");
            tfNewPass.setEchoChar((char) 0);
            tfPassConfirm.setEchoChar((char) 0);
            addPlaceHolder(tfNewPass, TXT_PASSWORD);
            addPlaceHolder(tfPassConfirm, TXT_CONFIRM_PASS);
            lblErreur.setVisible(true);
            return false;
        } else if(lstUtilisateurs.indexOf(u) == -1){
            imgError.setVisible(true);
            lblErreur.setText(TXT_UNEXISTING_USER_ERROR);
            lblErreur.setVisible(true);
            return false;            
        }
        return true;
    }

    /**
     * Méthode permettant d'ajouter un placeHolder à un champ texte.
     */
    private void addPlaceHolder(JTextField tf, String str) {
        if (tf.getText().length() == 0) {
            tf.setText(str);
            tf.setForeground(Color.LIGHT_GRAY);
        }
    }

    /**
     * Méthode permettant d'enlever un placeHolder après qu'il ait été ajouté.
     */
    private void removePlaceHolder(JTextField tf, String str) {
        if (tf.getText().equals(str)) {
            tf.setText("");
            tf.setForeground(Color.black);
        }
    }

    /**
     * Méthode permettant de gérer la position et la couleur du caret pour un
     * champ texte.
     */
    private void setCaretTF(JTextField tf) {
        tf.setCaretPosition(0);
        tf.setCaretColor(Color.black);
    }

    /**
     * Méthode permettant de valider si un champ texte est bien rempli pour la
     * validation des caret (curseur de sélection).
     */
    private boolean isFilledTF(JTextField tf, String txt) {
        if (tf.getText().length() > 0 && !tf.getText().equals(txt)) {
            return true;
        }
        return false;
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les
     * JPasswordField sur la base de l'event KeyReleased.
     */
    private void setPfKeyReleasedAction(JPasswordField tpf, String txt) {
        if (tpf.getText().length() == 0) {
            tpf.setEchoChar((char) 0);
            addPlaceHolder(tpf, txt);
            tpf.setCaretPosition(0);
        }
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les
     * JPasswordField sur la base de l'event KeyPressed.
     */
    private void setPfKeyPressedAction(JPasswordField tpf, String txt, java.awt.event.KeyEvent evt) {
        tpf.setEchoChar('*');
        if (tpf.getText().equals(txt) && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || tpf.getText().equals(txt) && evt.getKeyCode() == KeyEvent.VK_DELETE) {
            tpf.setEchoChar((char) 0);
            evt.consume();
            return;
        }
        removePlaceHolder(tpf, txt);
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les
     * JPasswordField sur la base de l'event Focus Lost.
     */
    private void setPfFocusLostAction(JPasswordField tpf, String txt) {
        if (tpf.getText().length() == 0) {
            tpf.setEchoChar((char) 0);
        }
        addPlaceHolder(tpf, txt);
    }

    /**
     * Méthode qui gère la configuration initiale de la fenêtre (celle au
     * chargement de l'application).
     */
    private void setStartUpConfig() {
        lblErreur.setVisible(false);
        imgError.setVisible(false);
        tfNewPass.setEchoChar((char) 0);
        tfPassConfirm.setEchoChar((char) 0);
    }

    /**
     * Méthode qui charge l'ArrayList des utilisateurs.
     */
    private void loadUsers() throws SQLException {
        lstUtilisateurs = UtilisateurDAO.getUsers();
    }
}
