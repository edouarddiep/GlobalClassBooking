/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import base.AvisDAO;
import base.ClubDAO;
import base.CoursDAO;
import base.UtilisateurDAO;
import com.toedter.calendar.JDateChooser;
import domaine.Avis;
import domaine.Club;
import domaine.Cours;
import domaine.Utilisateur;
import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;

/**
 *
 * @author Edouard Diep
 */
public class FrmMainMenuUser extends javax.swing.JFrame {

    private FrmLstCours frmListCours;
    private FrmMainMenuAdmin frmMainAdmin;
    private boolean isRememberChecked;
    private static final String TXT_AVIS = "Veuillez saisir votre texte ici (200 caractères max.)";
    private static int cpt = 200; // compteur permettant la gestion du nombre de caractères pour la textarea "Avis"
    private static final String TXT_AVIS_CONFIRM = "Merci ! Votre avis a bien été enregistré.";
    private static final String TXT_AVIS_ERROR = "Erreur : Veuillez saisir du texte avant d'enregistrer l'avis !";
    private static final String TXT_DATE_ERROR = "Erreur : Veuillez sélectionner une date dans le calendrier !";
    private static final String TXT_CB_CLUB_ERROR = "Erreur : Veuillez sélectionner un club dans la liste !";
    private static final String TXT_CB_COURS_ERROR = "Erreur : Veuillez sélectionner un cours dans la liste !";
    private static final String TXT_NULL_COURS_ERROR = "Aucun cours disponible pour ce club à cette date";
    private static final String TXT_COURSBOOK_ERROR = "Veuillez sélectionner un club et une date ci-contre !";
    private static final String TXT_BOOKING_CONFIRM_1 = "Merci ";
    private static final String TXT_BOOKING_CONFIRM_2 = " Votre cours a bien été réservé !";
    private static final String TXT_BIENVENUE = "Bienvenue ";
    private static SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");

    private ArrayList<Utilisateur> lstUtilisateurs;
    private ArrayList<Club> lstClubs;
    private ArrayList<Cours> lstCoursSelonClubDate;

    private static Utilisateur uCourant; // récupèration de l'utilisateur courant actuellement connecté à l'application

    /**
     * Creates new form FrmMainMenuUserNormal
     */
    public FrmMainMenuUser(java.awt.Frame parent, Utilisateur u) throws SQLException {
        initComponents();
        uCourant = u;
        setStartUpConfig(); // setter de la configuration initiale lors de l'ouverture de la fenêtre de l'application
        loadUsers();
        loadClubs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBienvenue = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        pnlReserverCours = new javax.swing.JPanel();
        lblCoursBook = new javax.swing.JLabel();
        cbCoursBook = new javax.swing.JComboBox<>();
        btnReserver = new javax.swing.JButton();
        lblTitreBookCourse1 = new javax.swing.JLabel();
        lblTitreBookCourse2 = new javax.swing.JLabel();
        lblClubBook = new javax.swing.JLabel();
        cbClubsBook = new javax.swing.JComboBox<>();
        lblDateBooked = new javax.swing.JLabel();
        calDateBooked = new com.toedter.calendar.JDateChooser();
        lblConfirmationBooked = new javax.swing.JLabel();
        imgConfirmationBooked = new javax.swing.JLabel();
        imgErrorBooked = new javax.swing.JLabel();
        pnlAvis = new javax.swing.JPanel();
        lblTitreAvis = new javax.swing.JLabel();
        spAvis = new javax.swing.JScrollPane();
        taAvis = new javax.swing.JTextArea();
        btnAnnuler = new javax.swing.JButton();
        btnSoumettre = new javax.swing.JButton();
        imgAvis = new javax.swing.JLabel();
        lblRemaingCarac = new javax.swing.JLabel();
        lblCptLetter = new javax.swing.JLabel();
        lblAvis = new javax.swing.JLabel();
        pnlMonCompte = new javax.swing.JPanel();
        lblInfoPassword = new javax.swing.JLabel();
        lblInfoUser = new javax.swing.JLabel();
        lblInfoDateNaissance = new javax.swing.JLabel();
        lblInfoEmail = new javax.swing.JLabel();
        lblTitreInfos = new javax.swing.JLabel();
        lblInfoNom = new javax.swing.JLabel();
        lblInfoPrenom = new javax.swing.JLabel();
        lblInfoDateInscr = new javax.swing.JLabel();
        tfInfoNom = new javax.swing.JTextField();
        tfInfoPrenom = new javax.swing.JTextField();
        tfInfoDateNaissance = new javax.swing.JTextField();
        tfInfoEmail = new javax.swing.JTextField();
        tfInfoDateInscr = new javax.swing.JTextField();
        tfInfoUser = new javax.swing.JTextField();
        chkAfficherPassword = new javax.swing.JCheckBox();
        btnModifierInfos = new javax.swing.JButton();
        imgInformations = new javax.swing.JLabel();
        tfInfoPassword = new javax.swing.JPasswordField();
        btnEnregistrer = new javax.swing.JButton();
        lblUserNo = new javax.swing.JLabel();
        pnlConsulterPlanning = new javax.swing.JPanel();
        lblTitrePlanningCours1 = new javax.swing.JLabel();
        lblTitrePlanningCours2 = new javax.swing.JLabel();
        cbClubsConsult = new javax.swing.JComboBox<>();
        btnPlanning = new javax.swing.JButton();
        lblClubConsult = new javax.swing.JLabel();
        lblErreur = new javax.swing.JLabel();
        imgErrorConsult = new javax.swing.JLabel();
        btnDeconnexion = new javax.swing.JButton();
        lblTitre = new javax.swing.JLabel();
        btnAccesAdmin = new javax.swing.JButton();
        chkRemember = new javax.swing.JCheckBox();
        imgBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Menu principal");
        setLocation(new java.awt.Point(550, 200));
        setMaximumSize(new java.awt.Dimension(829, 650));
        setMinimumSize(new java.awt.Dimension(829, 650));
        setName("FrmMainMenuUser"); // NOI18N
        setPreferredSize(new java.awt.Dimension(829, 650));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        lblBienvenue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBienvenue.setForeground(new java.awt.Color(51, 255, 51));
        getContentPane().add(lblBienvenue);
        lblBienvenue.setBounds(10, 10, 320, 20);

        jTabbedPane.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N

        pnlReserverCours.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{cbClubsBook, cbCoursBook, calDateBooked, btnReserver})
        );
        pnlReserverCours.setLayout(null);

        lblCoursBook.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblCoursBook.setForeground(new java.awt.Color(51, 51, 51));
        lblCoursBook.setText("3. Veuillez sélectionner un cours");
        lblCoursBook.setToolTipText("");
        pnlReserverCours.add(lblCoursBook);
        lblCoursBook.setBounds(310, 80, 450, 20);

        cbCoursBook.setToolTipText("Liste des cours");
        cbCoursBook.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCoursBookItemStateChanged(evt);
            }
        });
        pnlReserverCours.add(cbCoursBook);
        cbCoursBook.setBounds(320, 110, 390, 30);

        btnReserver.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnReserver.setText("Réserver le cours");
        btnReserver.setToolTipText("Confirmer la réservation du cours");
        btnReserver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReserverActionPerformed(evt);
            }
        });
        pnlReserverCours.add(btnReserver);
        btnReserver.setBounds(40, 300, 200, 50);

        lblTitreBookCourse1.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblTitreBookCourse1.setForeground(new java.awt.Color(0, 0, 204));
        lblTitreBookCourse1.setText("Vous savez déjà où, quand et quel cours choisir ?");
        lblTitreBookCourse1.setToolTipText("");
        pnlReserverCours.add(lblTitreBookCourse1);
        lblTitreBookCourse1.setBounds(10, 10, 450, 25);

        lblTitreBookCourse2.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblTitreBookCourse2.setForeground(new java.awt.Color(0, 0, 204));
        lblTitreBookCourse2.setText("Réservez le directement sans plus attendre !");
        lblTitreBookCourse2.setToolTipText("");
        pnlReserverCours.add(lblTitreBookCourse2);
        lblTitreBookCourse2.setBounds(10, 30, 450, 25);

        lblClubBook.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblClubBook.setForeground(new java.awt.Color(51, 51, 51));
        lblClubBook.setText("1. Veuillez sélectionner un club :");
        lblClubBook.setToolTipText("");
        pnlReserverCours.add(lblClubBook);
        lblClubBook.setBounds(30, 80, 450, 20);

        cbClubsBook.setToolTipText("Liste des clubs");
        cbClubsBook.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbClubsBookItemStateChanged(evt);
            }
        });
        pnlReserverCours.add(cbClubsBook);
        cbClubsBook.setBounds(40, 110, 210, 30);

        lblDateBooked.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblDateBooked.setForeground(new java.awt.Color(51, 51, 51));
        lblDateBooked.setText("2. Voir les dates disponibles :");
        lblDateBooked.setToolTipText("");
        pnlReserverCours.add(lblDateBooked);
        lblDateBooked.setBounds(30, 170, 240, 20);

        calDateBooked.setToolTipText("Calendrier");
        calDateBooked.setDateFormatString("dd.MM.yyyy");
        calDateBooked.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                calDateBookedHierarchyChanged(evt);
            }
        });
        calDateBooked.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calDateBookedPropertyChange(evt);
            }
        });
        pnlReserverCours.add(calDateBooked);
        calDateBooked.setBounds(40, 200, 220, 30);

        lblConfirmationBooked.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblConfirmationBooked.setForeground(new java.awt.Color(0, 0, 204));
        pnlReserverCours.add(lblConfirmationBooked);
        lblConfirmationBooked.setBounds(280, 290, 510, 70);

        imgConfirmationBooked.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_ConfirmCoursBooked.png"))); // NOI18N
        pnlReserverCours.add(imgConfirmationBooked);
        imgConfirmationBooked.setBounds(410, 180, 140, 130);

        imgErrorBooked.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        pnlReserverCours.add(imgErrorBooked);
        imgErrorBooked.setBounds(460, 230, 70, 60);

        jTabbedPane.addTab("Réserver un cours collectif", pnlReserverCours);

        pnlAvis.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{taAvis, btnAnnuler, btnSoumettre})
        );
        pnlAvis.setLayout(null);

        lblTitreAvis.setFont(new java.awt.Font("Malgun Gothic", 1, 19)); // NOI18N
        lblTitreAvis.setForeground(new java.awt.Color(0, 0, 204));
        lblTitreAvis.setText("Votre cours vous a plu ? Laissez-nous un avis !");
        pnlAvis.add(lblTitreAvis);
        lblTitreAvis.setBounds(10, 20, 460, 30);

        taAvis.setColumns(20);
        taAvis.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        taAvis.setForeground(new java.awt.Color(153, 153, 153));
        taAvis.setLineWrap(true);
        taAvis.setRows(5);
        taAvis.setToolTipText("Ecrire un avis");
        taAvis.setWrapStyleWord(true);
        taAvis.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                taAvisCaretUpdate(evt);
            }
        });
        taAvis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                taAvisFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                taAvisFocusLost(evt);
            }
        });
        taAvis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taAvisKeyPressed(evt);
            }
        });
        spAvis.setViewportView(taAvis);

        pnlAvis.add(spAvis);
        spAvis.setBounds(10, 60, 410, 260);

        btnAnnuler.setText("Annuler");
        btnAnnuler.setToolTipText("Annuler l'avis");
        btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnulerActionPerformed(evt);
            }
        });
        pnlAvis.add(btnAnnuler);
        btnAnnuler.setBounds(249, 330, 70, 23);

        btnSoumettre.setText("Soumettre");
        btnSoumettre.setToolTipText("Confirmer l'avis");
        btnSoumettre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSoumettreActionPerformed(evt);
            }
        });
        pnlAvis.add(btnSoumettre);
        btnSoumettre.setBounds(330, 330, 90, 23);

        imgAvis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg_frmMainMenuUserAvis.png"))); // NOI18N
        pnlAvis.add(imgAvis);
        imgAvis.setBounds(430, 60, 380, 260);

        lblRemaingCarac.setForeground(new java.awt.Color(153, 153, 153));
        lblRemaingCarac.setText("Nombre de caractères restants : ");
        pnlAvis.add(lblRemaingCarac);
        lblRemaingCarac.setBounds(10, 320, 180, 20);

        lblCptLetter.setForeground(new java.awt.Color(153, 153, 153));
        lblCptLetter.setText("0");
        pnlAvis.add(lblCptLetter);
        lblCptLetter.setBounds(190, 320, 30, 20);

        lblAvis.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblAvis.setForeground(new java.awt.Color(0, 0, 204));
        lblAvis.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlAvis.add(lblAvis);
        lblAvis.setBounds(10, 370, 410, 30);

        jTabbedPane.addTab("Donner son avis sur un cours", pnlAvis);

        pnlMonCompte.setBackground(new java.awt.Color(255, 255, 255));
        pnlMonCompte.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{tfInfoUser, tfInfoPassword, chkAfficherPassword, tfInfoNom, tfInfoPrenom, tfInfoDateNaissance, tfInfoEmail, tfInfoDateInscr, btnModifierInfos, btnEnregistrer})
        );
        pnlMonCompte.setLayout(null);

        lblInfoPassword.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblInfoPassword.setText("Mot de passe :");
        pnlMonCompte.add(lblInfoPassword);
        lblInfoPassword.setBounds(50, 100, 110, 40);

        lblInfoUser.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblInfoUser.setText("Nom d'utilisateur : ");
        pnlMonCompte.add(lblInfoUser);
        lblInfoUser.setBounds(50, 60, 120, 40);

        lblInfoDateNaissance.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblInfoDateNaissance.setText("Date de naissance :");
        pnlMonCompte.add(lblInfoDateNaissance);
        lblInfoDateNaissance.setBounds(50, 240, 120, 40);

        lblInfoEmail.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblInfoEmail.setText("Email :");
        pnlMonCompte.add(lblInfoEmail);
        lblInfoEmail.setBounds(50, 290, 50, 40);

        lblTitreInfos.setFont(new java.awt.Font("Malgun Gothic", 1, 20)); // NOI18N
        lblTitreInfos.setForeground(new java.awt.Color(0, 0, 204));
        lblTitreInfos.setText("Mes données personnelles :");
        pnlMonCompte.add(lblTitreInfos);
        lblTitreInfos.setBounds(50, 20, 310, 40);

        lblInfoNom.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblInfoNom.setText("Nom :");
        pnlMonCompte.add(lblInfoNom);
        lblInfoNom.setBounds(50, 150, 50, 40);

        lblInfoPrenom.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblInfoPrenom.setText("Prénom :");
        pnlMonCompte.add(lblInfoPrenom);
        lblInfoPrenom.setBounds(50, 190, 60, 40);

        lblInfoDateInscr.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblInfoDateInscr.setText("Date d'inscription :");
        pnlMonCompte.add(lblInfoDateInscr);
        lblInfoDateInscr.setBounds(50, 340, 110, 40);

        tfInfoNom.setToolTipText("Nom");
        tfInfoNom.setEnabled(false);
        pnlMonCompte.add(tfInfoNom);
        tfInfoNom.setBounds(170, 155, 170, 30);

        tfInfoPrenom.setToolTipText("Prénom");
        tfInfoPrenom.setEnabled(false);
        pnlMonCompte.add(tfInfoPrenom);
        tfInfoPrenom.setBounds(170, 195, 170, 30);

        tfInfoDateNaissance.setToolTipText("Date de naissance");
        tfInfoDateNaissance.setEnabled(false);
        pnlMonCompte.add(tfInfoDateNaissance);
        tfInfoDateNaissance.setBounds(170, 245, 170, 30);

        tfInfoEmail.setToolTipText("Email");
        tfInfoEmail.setEnabled(false);
        pnlMonCompte.add(tfInfoEmail);
        tfInfoEmail.setBounds(170, 295, 170, 30);

        tfInfoDateInscr.setToolTipText("Date d'inscription");
        tfInfoDateInscr.setEnabled(false);
        pnlMonCompte.add(tfInfoDateInscr);
        tfInfoDateInscr.setBounds(170, 345, 170, 30);

        tfInfoUser.setToolTipText("Identifiant");
        tfInfoUser.setEnabled(false);
        pnlMonCompte.add(tfInfoUser);
        tfInfoUser.setBounds(170, 65, 170, 30);

        chkAfficherPassword.setBackground(new java.awt.Color(255, 255, 255));
        chkAfficherPassword.setText("afficher");
        chkAfficherPassword.setToolTipText("affiche en toutes lettres le mot de passe");
        chkAfficherPassword.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAfficherPasswordItemStateChanged(evt);
            }
        });
        pnlMonCompte.add(chkAfficherPassword);
        chkAfficherPassword.setBounds(340, 110, 63, 23);

        btnModifierInfos.setText("Modifier les informations");
        btnModifierInfos.setToolTipText("Modifier les informations de l'utilisateur courant");
        btnModifierInfos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifierInfosActionPerformed(evt);
            }
        });
        pnlMonCompte.add(btnModifierInfos);
        btnModifierInfos.setBounds(500, 330, 170, 40);

        imgInformations.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg_frmMainMenuUserInfos.jpg"))); // NOI18N
        pnlMonCompte.add(imgInformations);
        imgInformations.setBounds(420, 90, 320, 220);

        tfInfoPassword.setToolTipText("Mot de passe");
        tfInfoPassword.setEnabled(false);
        pnlMonCompte.add(tfInfoPassword);
        tfInfoPassword.setBounds(170, 105, 170, 30);

        btnEnregistrer.setText("Enregistrer");
        btnEnregistrer.setToolTipText("Valider les modifications");
        btnEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnregistrerActionPerformed(evt);
            }
        });
        pnlMonCompte.add(btnEnregistrer);
        btnEnregistrer.setBounds(240, 380, 100, 30);
        pnlMonCompte.add(lblUserNo);
        lblUserNo.setBounds(770, 10, 0, 0);

        jTabbedPane.addTab("Mon compte", pnlMonCompte);

        pnlConsulterPlanning.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{cbClubsConsult, btnPlanning})
        );
        pnlConsulterPlanning.setLayout(null);

        lblTitrePlanningCours1.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblTitrePlanningCours1.setForeground(new java.awt.Color(0, 0, 204));
        lblTitrePlanningCours1.setText("Pour quel club souhaitez-vous");
        lblTitrePlanningCours1.setToolTipText("");
        pnlConsulterPlanning.add(lblTitrePlanningCours1);
        lblTitrePlanningCours1.setBounds(10, 10, 450, 25);

        lblTitrePlanningCours2.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblTitrePlanningCours2.setForeground(new java.awt.Color(0, 0, 204));
        lblTitrePlanningCours2.setText("consulter le planning des cours ?");
        lblTitrePlanningCours2.setToolTipText("");
        pnlConsulterPlanning.add(lblTitrePlanningCours2);
        lblTitrePlanningCours2.setBounds(10, 30, 450, 25);

        cbClubsConsult.setToolTipText("Liste des clubs");
        cbClubsConsult.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbClubsConsultItemStateChanged(evt);
            }
        });
        pnlConsulterPlanning.add(cbClubsConsult);
        cbClubsConsult.setBounds(30, 110, 210, 30);

        btnPlanning.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPlanning.setText("Voir le planning");
        btnPlanning.setToolTipText("Consulter le planning des cours disponibles");
        btnPlanning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlanningActionPerformed(evt);
            }
        });
        pnlConsulterPlanning.add(btnPlanning);
        btnPlanning.setBounds(30, 190, 200, 50);

        lblClubConsult.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblClubConsult.setForeground(new java.awt.Color(51, 51, 51));
        lblClubConsult.setText("1. Veuillez sélectionner un club :");
        lblClubConsult.setToolTipText("");
        pnlConsulterPlanning.add(lblClubConsult);
        lblClubConsult.setBounds(30, 80, 450, 20);

        lblErreur.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblErreur.setForeground(new java.awt.Color(0, 0, 204));
        lblErreur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlConsulterPlanning.add(lblErreur);
        lblErreur.setBounds(210, 350, 410, 30);

        imgErrorConsult.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        pnlConsulterPlanning.add(imgErrorConsult);
        imgErrorConsult.setBounds(380, 290, 70, 60);

        jTabbedPane.addTab("Consulter le planning des cours", pnlConsulterPlanning);

        getContentPane().add(jTabbedPane);
        jTabbedPane.setBounds(0, 130, 830, 490);

        btnDeconnexion.setText("Se déconnecter");
        btnDeconnexion.setToolTipText("Se déconnecter de l'application");
        btnDeconnexion.setBorder(null);
        btnDeconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeconnexionActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeconnexion);
        btnDeconnexion.setBounds(7, 27, 100, 20);

        lblTitre.setFont(new java.awt.Font("Malgun Gothic", 1, 28)); // NOI18N
        lblTitre.setForeground(new java.awt.Color(0, 0, 204));
        lblTitre.setText("Menu principal");
        getContentPane().add(lblTitre);
        lblTitre.setBounds(300, 50, 210, 38);

        btnAccesAdmin.setText("Revenir à l'interface administrateur");
        btnAccesAdmin.setToolTipText("Reviens à l'interface privilégiée");
        btnAccesAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccesAdminActionPerformed(evt);
            }
        });
        getContentPane().add(btnAccesAdmin);
        btnAccesAdmin.setBounds(580, 10, 240, 23);

        chkRemember.setEnabled(false);
        getContentPane().add(chkRemember);
        chkRemember.setBounds(120, 190, 10, 0);

        imgBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg_frmMainMenuUserBanniere.png"))); // NOI18N
        getContentPane().add(imgBackGround);
        imgBackGround.setBounds(0, 0, 830, 270);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlanningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlanningActionPerformed
        if (isComboBoxValid(cbClubsConsult, imgErrorConsult, lblErreur, TXT_CB_CLUB_ERROR)) {
            Club c = lstClubs.get(cbClubsConsult.getSelectedIndex());
            if (frmListCours == null) {
                try {
                    frmListCours = new FrmLstCours(this, uCourant, c);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
                frmListCours.setRememberState(getRememberState()); // test de la fonction "Se souvenir de moi"
                frmListCours.setVisible(true);
            }
            this.dispose();
        } else {
            return;
        }
    }//GEN-LAST:event_btnPlanningActionPerformed

    private void btnReserverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReserverActionPerformed
        if (isComboBoxValid(cbClubsBook, imgErrorBooked, lblConfirmationBooked, TXT_CB_CLUB_ERROR) && isComboBoxValid(cbCoursBook, imgErrorBooked, lblConfirmationBooked, TXT_CB_COURS_ERROR) && isCalValide(calDateBooked, imgErrorBooked, lblConfirmationBooked, TXT_DATE_ERROR)) {
            Cours c = lstCoursSelonClubDate.get(cbCoursBook.getSelectedIndex());
            lblConfirmationBooked.setForeground(Color.BLUE);
            lblConfirmationBooked.setLocation(280, 290);
            lblConfirmationBooked.setText("<html>" + TXT_BOOKING_CONFIRM_1 + "<font color=red>" + uCourant.getUsername() + "</font> !" + TXT_BOOKING_CONFIRM_2 + "</html>");
            imgErrorBooked.setVisible(false);
            lblConfirmationBooked.setVisible(true);
            imgConfirmationBooked.setVisible(true);
            btnReserver.setEnabled(false);
            try {
                CoursDAO.insertParticipation(uCourant.getNo(), c.getNo());
            } catch (SQLException ex) {
                imgErrorBooked.setVisible(true);
                imgConfirmationBooked.setVisible(false);
                lblConfirmationBooked.setForeground(Color.RED);
                lblConfirmationBooked.setLocation(315, 290);
                lblConfirmationBooked.setText("vous avez déjà réservé ce cours auparavant !");
                lblConfirmationBooked.setVisible(true);
                return;
            }
        }

    }//GEN-LAST:event_btnReserverActionPerformed

    private void taAvisFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taAvisFocusGained
        if (taAvis.getText().equals(TXT_AVIS)) {
            taAvis.setText("");
            taAvis.setForeground(Color.black);
        }
    }//GEN-LAST:event_taAvisFocusGained

    private void taAvisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taAvisFocusLost
        if (taAvis.getText().length() == 0) {
            taAvis.setForeground(Color.LIGHT_GRAY);
            taAvis.setText(TXT_AVIS);
        }
    }//GEN-LAST:event_taAvisFocusLost

    private void taAvisKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taAvisKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            taAvis.setEditable(true);
        }
    }//GEN-LAST:event_taAvisKeyPressed

    private void btnSoumettreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSoumettreActionPerformed
        if (!taAvis.getText().equals(TXT_AVIS) && taAvis.getText().length() > 0) {
            Avis a = new Avis(taAvis.getText(), uCourant.getNo());
            try {
                AvisDAO.insert(a);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            lblAvis.setForeground(Color.blue);
            lblAvis.setText(TXT_AVIS_CONFIRM);
            lblAvis.setVisible(true);
            taAvis.setText("");
        } else {
            lblAvis.setForeground(Color.red);
            lblAvis.setText(TXT_AVIS_ERROR);
            lblAvis.setVisible(true);
        }
    }//GEN-LAST:event_btnSoumettreActionPerformed

    private void btnDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeconnexionActionPerformed
        try {
            FrmLogin frmLogin = new FrmLogin();
            if (getRememberState() == true) {
                frmLogin.setUser(uCourant.getUsername());
                frmLogin.setPass(uCourant.getPassword());
            }
            frmLogin.setRememberState(getRememberState());
            frmLogin.setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnDeconnexionActionPerformed

    private void calDateBookedHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_calDateBookedHierarchyChanged
        setMinSelectableDate(calDateBooked);
    }//GEN-LAST:event_calDateBookedHierarchyChanged

    private void calDateBookedPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calDateBookedPropertyChange
        hideMessage(imgConfirmationBooked, lblConfirmationBooked);
        hideMessage(imgErrorBooked, lblConfirmationBooked);
        if (cbClubsBook.getSelectedIndex() != -1) {
            try {
                loadCoursClub();
            } catch (SQLException ex) {
                ex.printStackTrace();
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_calDateBookedPropertyChange

    private void btnModifierInfosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifierInfosActionPerformed
        manageUpdateInfos(true, false);
    }//GEN-LAST:event_btnModifierInfosActionPerformed

    private void chkAfficherPasswordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAfficherPasswordItemStateChanged
        if (chkAfficherPassword.isSelected()) {
            tfInfoPassword.setEchoChar((char) 0);
        } else {
            tfInfoPassword.setEchoChar('*');
        }
    }//GEN-LAST:event_chkAfficherPasswordItemStateChanged

    private void btnEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnregistrerActionPerformed
        manageUpdateInfos(false, true);
        try {
            Utilisateur u = new Utilisateur(Integer.parseInt(lblUserNo.getText()), tfInfoNom.getText(), tfInfoPrenom.getText(), sdf.parse(tfInfoDateNaissance.getText()), tfInfoEmail.getText(), tfInfoUser.getText(), tfInfoPassword.getText(), sdf.parse(tfInfoDateInscr.getText()), false);
            int index = lstUtilisateurs.indexOf(u);
            if (index != -1) {
                Utilisateur userCourant = lstUtilisateurs.get(index);
                userCourant.setNom(tfInfoNom.getText());
                userCourant.setPrenom(tfInfoPrenom.getText());
                userCourant.setDateNaissance(sdf.parse(tfInfoDateNaissance.getText()));
                userCourant.setEmail(tfInfoEmail.getText());
                userCourant.setUsername(tfInfoUser.getText());
                userCourant.setPassword(tfInfoPassword.getText());
                UtilisateurDAO.update(userCourant.getNo(), userCourant.getUsername(), userCourant.getPassword(), userCourant.getNom(), userCourant.getPrenom(), userCourant.getDateNaissance(), userCourant.getEmail(), userCourant.getIsAdmin());
            }
        } catch (ParseException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEnregistrerActionPerformed

    private void taAvisCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_taAvisCaretUpdate
        int nbCaracteres = Integer.parseInt(lblCptLetter.getText());
        if (nbCaracteres > 1) {
            taAvis.setEditable(true);
        } else {
            lblCptLetter.setText("0");
            taAvis.setEditable(false);
        }
        lblCptLetter.setText(String.valueOf(cpt - taAvis.getText().length()));
    }//GEN-LAST:event_taAvisCaretUpdate

    private void btnAccesAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccesAdminActionPerformed
        this.dispose();
        if (frmMainAdmin == null) {
            try {
                frmMainAdmin = new FrmMainMenuAdmin(this, uCourant);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            frmMainAdmin.setVisible(true);
            frmMainAdmin.setRememberState(getRememberState()); // test de la fonction "Se souvenir de moi"
        }
    }//GEN-LAST:event_btnAccesAdminActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        FrmQuit frmQuit = new FrmQuit(this, true, uCourant);
        frmQuit.setPar(this);
        frmQuit.setRememberState(getRememberState());
        frmQuit.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void cbClubsConsultItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbClubsConsultItemStateChanged
        hideMessage(imgErrorConsult, lblErreur);
    }//GEN-LAST:event_cbClubsConsultItemStateChanged

    private void cbClubsBookItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbClubsBookItemStateChanged
        hideMessage(imgErrorBooked, lblConfirmationBooked);
        hideMessage(imgConfirmationBooked, lblConfirmationBooked);
        if (calDateBooked.getDate() != null) {
            try {
                loadCoursClub();
            } catch (SQLException ex) {
                ex.printStackTrace();
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_cbClubsBookItemStateChanged

    private void cbCoursBookItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCoursBookItemStateChanged
        hideMessage(imgErrorBooked, lblConfirmationBooked);
        hideMessage(imgConfirmationBooked, lblConfirmationBooked);
        btnReserver.setEnabled(true);
    }//GEN-LAST:event_cbCoursBookItemStateChanged

    private void btnAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnulerActionPerformed
        taAvis.setForeground(Color.LIGHT_GRAY);
        taAvis.setText(TXT_AVIS);
    }//GEN-LAST:event_btnAnnulerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmMainMenuUser(new javax.swing.JFrame(), uCourant).setVisible(true);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccesAdmin;
    private javax.swing.JButton btnAnnuler;
    private javax.swing.JButton btnDeconnexion;
    private javax.swing.JButton btnEnregistrer;
    private javax.swing.JButton btnModifierInfos;
    private javax.swing.JButton btnPlanning;
    private javax.swing.JButton btnReserver;
    private javax.swing.JButton btnSoumettre;
    private com.toedter.calendar.JDateChooser calDateBooked;
    private javax.swing.JComboBox<String> cbClubsBook;
    private javax.swing.JComboBox<String> cbClubsConsult;
    private javax.swing.JComboBox<String> cbCoursBook;
    private javax.swing.JCheckBox chkAfficherPassword;
    private javax.swing.JCheckBox chkRemember;
    private javax.swing.JLabel imgAvis;
    private javax.swing.JLabel imgBackGround;
    private javax.swing.JLabel imgConfirmationBooked;
    private javax.swing.JLabel imgErrorBooked;
    private javax.swing.JLabel imgErrorConsult;
    private javax.swing.JLabel imgInformations;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel lblAvis;
    private javax.swing.JLabel lblBienvenue;
    private javax.swing.JLabel lblClubBook;
    private javax.swing.JLabel lblClubConsult;
    private javax.swing.JLabel lblConfirmationBooked;
    private javax.swing.JLabel lblCoursBook;
    private javax.swing.JLabel lblCptLetter;
    private javax.swing.JLabel lblDateBooked;
    private javax.swing.JLabel lblErreur;
    private javax.swing.JLabel lblInfoDateInscr;
    private javax.swing.JLabel lblInfoDateNaissance;
    private javax.swing.JLabel lblInfoEmail;
    private javax.swing.JLabel lblInfoNom;
    private javax.swing.JLabel lblInfoPassword;
    private javax.swing.JLabel lblInfoPrenom;
    private javax.swing.JLabel lblInfoUser;
    private javax.swing.JLabel lblRemaingCarac;
    private javax.swing.JLabel lblTitre;
    private javax.swing.JLabel lblTitreAvis;
    private javax.swing.JLabel lblTitreBookCourse1;
    private javax.swing.JLabel lblTitreBookCourse2;
    private javax.swing.JLabel lblTitreInfos;
    private javax.swing.JLabel lblTitrePlanningCours1;
    private javax.swing.JLabel lblTitrePlanningCours2;
    private javax.swing.JLabel lblUserNo;
    private javax.swing.JPanel pnlAvis;
    private javax.swing.JPanel pnlConsulterPlanning;
    private javax.swing.JPanel pnlMonCompte;
    private javax.swing.JPanel pnlReserverCours;
    private javax.swing.JScrollPane spAvis;
    private javax.swing.JTextArea taAvis;
    private javax.swing.JTextField tfInfoDateInscr;
    private javax.swing.JTextField tfInfoDateNaissance;
    private javax.swing.JTextField tfInfoEmail;
    private javax.swing.JTextField tfInfoNom;
    private javax.swing.JPasswordField tfInfoPassword;
    private javax.swing.JTextField tfInfoPrenom;
    private javax.swing.JTextField tfInfoUser;
    // End of variables declaration//GEN-END:variables

    /**
     * Méthode qui défini la date minimum sélectionnable dans mon composant
     * JDateChooser.
     */
    private void setMinSelectableDate(JDateChooser jCal) {
        Date now = new Date(); // récupère la date du jour
        jCal.setMinSelectableDate(now); // permet de définir la plus petite date sélectionnable à partir de "now"
    }

    /**
     * Méthode qui valide la sélection d'une date dans le JDateChooser (si null,
     * alors erreur sinon, return true).
     */
    private boolean isCalValide(JDateChooser jCal, JLabel img, JLabel lbl, String txt) {
        if (jCal.getDate() == null) {
            img.setVisible(true);
            lbl.setForeground(Color.red);
            lbl.setText(txt);
            lbl.setVisible(true);
            return false;
        }
        return true;
    }

    /**
     * Méthode qui valide une ComboBox selon la condition "si un élément est
     * sélectionné alors je return true, sinon j'affiche un msg d'erreur".
     */
    private boolean isComboBoxValid(JComboBox cb, JLabel img, JLabel lbl, String txt) {
        if (cb.getSelectedIndex() == -1) {
            img.setVisible(true);
            lbl.setForeground(Color.red);
            lbl.setText(txt);
            lbl.setVisible(true);
            return false;
        }
        return true;
    }

    /**
     * Méthode qui gère l'état de divers composants de la fenêtre selon quel
     * bouton est cliqué.
     */
    private void manageUpdateInfos(boolean enable, boolean visible) {
        tfInfoUser.setEnabled(enable);
        tfInfoNom.setEnabled(enable);
        tfInfoEmail.setEnabled(enable);
        tfInfoDateNaissance.setEnabled(enable);
        tfInfoPrenom.setEnabled(enable);
        tfInfoPassword.setEnabled(enable);
        btnModifierInfos.setVisible(visible);
        btnEnregistrer.setVisible(enable);
    }

    /**
     * Méthode qui gère la configuration initiale de la fenêtre (celle au
     * chargement de l'application).
     */
    private void setStartUpConfig() {
        lblBienvenue.setText(TXT_BIENVENUE + uCourant.getUsername());
        lblConfirmationBooked.setVisible(false);
        imgConfirmationBooked.setVisible(false);
        lblCptLetter.setText(String.valueOf(cpt));
        imgErrorConsult.setVisible(false);
        imgErrorBooked.setVisible(false);
        lblErreur.setVisible(false);
        lblUserNo.setVisible(false);
        btnEnregistrer.setVisible(false);
        btnAccesAdmin.setVisible(uCourant.getIsAdmin());
        cbClubsBook.setSelectedIndex(-1);
        cbCoursBook.setSelectedIndex(-1);
        cbClubsConsult.setSelectedIndex(-1);
        taAvis.setForeground(Color.LIGHT_GRAY);
        taAvis.setText(TXT_AVIS);
        lblUserNo.setText(String.valueOf(uCourant.getNo()));
        tfInfoUser.setText(uCourant.getUsername());
        tfInfoPassword.setText(uCourant.getPassword());
        tfInfoDateNaissance.setText(sdf.format(uCourant.getDateNaissance()));
        tfInfoEmail.setText(uCourant.getEmail());
        tfInfoNom.setText(uCourant.getNom());
        tfInfoPrenom.setText(uCourant.getPrenom());
        tfInfoDateInscr.setText(sdf.format(uCourant.getDateInscr()));
        cbCoursBook.addItem(TXT_COURSBOOK_ERROR);
    }

    /**
     * Méthode qui gère l'état de la checkbox "chkRemember" pour implanter la
     * fonctionnalité "se souvenir de moi" lors du login de l'utilisateur.
     */
    public void setRememberState(boolean state) {
        this.isRememberChecked = state;
        this.chkRemember.setSelected(state);
    }

    /**
     * Méthode qui retourne l'état de la checkbox "chkRemember".
     */
    public boolean getRememberState() {
        return isRememberChecked;
    }

    /**
     * Méthode purement réutilisable pour enlever le label et l'image d'erreur
     * ou de validation après modification de l'utilisateur sur un composant.
     */
    private void hideMessage(JLabel img, JLabel lblErreur) {
        img.setVisible(false);
        lblErreur.setVisible(false);
    }

    /**
     * Méthode qui charge l'ArrayList des utilisateurs.
     */
    private void loadUsers() throws SQLException {
        lstUtilisateurs = UtilisateurDAO.getUsers();
    }

    /**
     * Méthode qui charge l'ArrayList des clubs.
     */
    private void loadClubs() throws SQLException {
        cbClubsConsult.removeAllItems();
        cbClubsBook.removeAllItems();
        lstClubs = ClubDAO.getClubs();
        for (int i = 0; i < lstClubs.size(); i++) {
            cbClubsConsult.addItem(lstClubs.get(i).toString());
            cbClubsBook.addItem(lstClubs.get(i).toString());
        }
        cbClubsConsult.setSelectedIndex(0);
        cbClubsBook.setSelectedIndex(0);
    }

    /**
     * Méthode qui charge l'ArrayList des clubs selon les cours.
     */
    private void loadCoursClub() throws SQLException, ParseException {
        Club c = lstClubs.get(cbClubsBook.getSelectedIndex());
        if (calDateBooked.getDate() == null) {
            return;
        }
        String d = sdf.format(calDateBooked.getDate());
        cbCoursBook.removeAllItems();
        lstCoursSelonClubDate = CoursDAO.getCoursSelonClubDate(c.getNo(), d);
        for (int i = 0; i < lstCoursSelonClubDate.size(); i++) {
            cbCoursBook.addItem(lstCoursSelonClubDate.get(i).toString());
        }
        if (cbCoursBook.getItemCount() < 1) {
            cbCoursBook.addItem(TXT_NULL_COURS_ERROR);
        }
    }

}
