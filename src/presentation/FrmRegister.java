/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import base.EmailValidator;
import base.UtilisateurDAO;
import domaine.Utilisateur;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 *
 * @author Edouard Diep
 */
public class FrmRegister extends javax.swing.JDialog {

    FrmLogin frmLogin = new FrmLogin();
    private static final String TXT_NOM = "Nom";
    private static final String TXT_PRENOM = "Prénom";
    private static final String TXT_EMAIL = "Email";
    private static final String TXT_DATE_NAISSANCE = "Date de naissance (Ex : 01.01.1990)";
    private static final String TXT_USERNAME = "Nom d'utilisateur";
    private static final String TXT_PASSWORD = "Mot de passe";
    private static final String TXT_CONFIRM_PASS = "Confirmer le mot de passe";
    private static final String MSG_FIELD_ERROR = "Erreur : Veuillez remplir tous les champs !";
    private static final String MSG_PASS_ERROR = "Erreur : les mots de passe ne correspondent pas !";
    private static final String MSG_USER_ERROR = "Erreur : le nom d'utilisateur doit au moins contenir 1 lettre !";
    private static final String MSG_EMAIL_ERROR = "Erreur : L'email n'est pas valide !";
    private static final String MSG_BIRTHDATE_ERROR = "Erreur : La date de naissance n'est pas valide !";
    private static final String MSG_BIRTHDATE_ERROR2 = "Format valide : 01.01.1990";
    private static final String MSG_USERNAME_ERROR = "Erreur : ce nom d'utilisateur est déjà pris !";
    private static final String LETTER_REGEX_PATTERN = ".*[a-zA-Z].*";
    SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
    
    private ArrayList<Utilisateur> lstUtilisateurs;
    /**
     * Creates new form FrmRegisterDialog
     */
    public FrmRegister(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();
        setStartUpConfig(); // setter de la configuration initiale lors de l'ouverture de la fenêtre de l'application
        loadUsers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitre = new javax.swing.JLabel();
        lblInfos = new javax.swing.JLabel();
        tfNom = new javax.swing.JTextField();
        tfPrenom = new javax.swing.JTextField();
        tfEmail = new javax.swing.JTextField();
        tfDateNaissance = new javax.swing.JTextField();
        tfNomUtilisateur = new javax.swing.JTextField();
        tfPassword = new javax.swing.JPasswordField();
        tfPasswordConfirm = new javax.swing.JPasswordField();
        btnAnnuler = new javax.swing.JButton();
        btnValider = new javax.swing.JButton();
        lblErreur2 = new javax.swing.JLabel();
        lblErreur = new javax.swing.JLabel();
        imgBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Formulaire d'inscription");
        setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{lblTitre, tfNom, tfPrenom, tfEmail, tfDateNaissance, tfNomUtilisateur, tfPassword, tfPasswordConfirm, btnAnnuler, btnValider})
        );
        setLocation(new java.awt.Point(750, 250));
        setMaximumSize(new java.awt.Dimension(370, 425));
        setMinimumSize(new java.awt.Dimension(370, 425));
        setPreferredSize(new java.awt.Dimension(370, 400));
        setResizable(false);
        getContentPane().setLayout(null);

        lblTitre.setFont(new java.awt.Font("Malgun Gothic", 1, 24)); // NOI18N
        lblTitre.setText("Formulaire d'inscription");
        getContentPane().add(lblTitre);
        lblTitre.setBounds(20, 30, 280, 30);

        lblInfos.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblInfos.setText("Merci de compléter les informations suivantes :");
        getContentPane().add(lblInfos);
        lblInfos.setBounds(20, 60, 340, 20);

        tfNom.setForeground(java.awt.Color.lightGray);
        tfNom.setText("Nom");
        tfNom.setToolTipText("Nom");
        tfNom.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfNom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfFieldsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfFieldsFocusLost(evt);
            }
        });
        tfNom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfFieldsMouseClicked(evt);
            }
        });
        tfNom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNomKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfNomKeyReleased(evt);
            }
        });
        getContentPane().add(tfNom);
        tfNom.setBounds(70, 96, 220, 30);

        tfPrenom.setForeground(java.awt.Color.lightGray);
        tfPrenom.setText("Prénom");
        tfPrenom.setToolTipText("Prénom");
        tfPrenom.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfPrenom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfFieldsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfFieldsFocusLost(evt);
            }
        });
        tfPrenom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfFieldsMouseClicked(evt);
            }
        });
        tfPrenom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPrenomKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPrenomKeyReleased(evt);
            }
        });
        getContentPane().add(tfPrenom);
        tfPrenom.setBounds(70, 126, 220, 30);

        tfEmail.setForeground(java.awt.Color.lightGray);
        tfEmail.setText("Email");
        tfEmail.setToolTipText("Email");
        tfEmail.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfFieldsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfFieldsFocusLost(evt);
            }
        });
        tfEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfFieldsMouseClicked(evt);
            }
        });
        tfEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfEmailKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfEmailKeyReleased(evt);
            }
        });
        getContentPane().add(tfEmail);
        tfEmail.setBounds(70, 156, 220, 30);

        tfDateNaissance.setForeground(java.awt.Color.lightGray);
        tfDateNaissance.setText("Date de naissance (Ex : 01.01.1990)");
        tfDateNaissance.setToolTipText("Date de naissance");
        tfDateNaissance.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfDateNaissance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfFieldsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfFieldsFocusLost(evt);
            }
        });
        tfDateNaissance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfFieldsMouseClicked(evt);
            }
        });
        tfDateNaissance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfDateNaissanceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfDateNaissanceKeyReleased(evt);
            }
        });
        getContentPane().add(tfDateNaissance);
        tfDateNaissance.setBounds(70, 186, 220, 30);

        tfNomUtilisateur.setForeground(java.awt.Color.lightGray);
        tfNomUtilisateur.setText("Nom d'utilisateur");
        tfNomUtilisateur.setToolTipText("Identifiant");
        tfNomUtilisateur.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfNomUtilisateur.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfFieldsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfFieldsFocusLost(evt);
            }
        });
        tfNomUtilisateur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfFieldsMouseClicked(evt);
            }
        });
        tfNomUtilisateur.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNomUtilisateurKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfNomUtilisateurKeyReleased(evt);
            }
        });
        getContentPane().add(tfNomUtilisateur);
        tfNomUtilisateur.setBounds(70, 216, 220, 30);

        tfPassword.setForeground(java.awt.Color.lightGray);
        tfPassword.setText("Mot de passe");
        tfPassword.setToolTipText("Mot de passe");
        tfPassword.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfFieldsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfPasswordFocusLost(evt);
            }
        });
        tfPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfFieldsMouseClicked(evt);
            }
        });
        tfPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPasswordKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPasswordKeyReleased(evt);
            }
        });
        getContentPane().add(tfPassword);
        tfPassword.setBounds(70, 246, 220, 30);

        tfPasswordConfirm.setForeground(java.awt.Color.lightGray);
        tfPasswordConfirm.setText("Confirmer le mot de passe");
        tfPasswordConfirm.setToolTipText("Confirmer le mot de passe");
        tfPasswordConfirm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfPasswordConfirm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfFieldsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfPasswordFocusLost(evt);
            }
        });
        tfPasswordConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfFieldsMouseClicked(evt);
            }
        });
        tfPasswordConfirm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPasswordConfirmKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPasswordConfirmKeyReleased(evt);
            }
        });
        getContentPane().add(tfPasswordConfirm);
        tfPasswordConfirm.setBounds(70, 276, 220, 30);

        btnAnnuler.setText("Annuler");
        btnAnnuler.setToolTipText("Annuler");
        btnAnnuler.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnulerActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnnuler);
        btnAnnuler.setBounds(90, 320, 80, 23);

        btnValider.setText("Valider");
        btnValider.setToolTipText("Valide et enregistre l'inscription");
        btnValider.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValiderActionPerformed(evt);
            }
        });
        getContentPane().add(btnValider);
        btnValider.setBounds(190, 320, 80, 23);

        lblErreur2.setFont(new java.awt.Font("Malgun Gothic", 3, 12)); // NOI18N
        lblErreur2.setForeground(new java.awt.Color(255, 0, 0));
        lblErreur2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblErreur2);
        lblErreur2.setBounds(30, 370, 310, 30);

        lblErreur.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        lblErreur.setForeground(new java.awt.Color(255, 0, 0));
        lblErreur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblErreur);
        lblErreur.setBounds(30, 350, 310, 30);

        imgBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg_frmRegister.jpg"))); // NOI18N
        getContentPane().add(imgBackGround);
        imgBackGround.setBounds(0, 0, 370, 400);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnulerActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnAnnulerActionPerformed

    private void btnValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValiderActionPerformed
        if (isValide()) {
            Date dateCourante = new Date(); // je récupère la date courante
            boolean isAdmin = false;
            try {
                // TENTATIVE DE HASHAGE MD5 (J'ai pensé utiliser cela pour sécuriser mes mots de passes mais je ne suis pas parvenu à le faire fonctionner correctement)
                /*MessageDigest md = MessageDigest.getInstance("MD5");
                md.update(tfPassword.getText().getBytes());
                byte[] md5 = md.digest();
                System.out.println(Arrays.toString(md5)); */
                Utilisateur u = new Utilisateur(0, tfNom.getText(), tfPrenom.getText(), sdf.parse(tfDateNaissance.getText()), tfEmail.getText(), tfNomUtilisateur.getText(), tfPassword.getText(), dateCourante, isAdmin);
                UtilisateurDAO.insert(u);
                lstUtilisateurs.add(u);
                loadUsers();
            } catch (ParseException ex) {
                ex.printStackTrace();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            this.dispose();
        }
    }//GEN-LAST:event_btnValiderActionPerformed

    /**
     * Listener général pour gérer le focus gained sur tous les champs textes
     * (définis par evt.getComponent())
     */
    private void tfFieldsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfFieldsFocusGained
        if (evt.getComponent().equals(tfNom) && !isFilledTF(tfNom, TXT_NOM)) {
            setCaretTF(tfNom);
        } else if (evt.getComponent().equals(tfPrenom) && !isFilledTF(tfPrenom, TXT_PRENOM)) {
            setCaretTF(tfPrenom);
        } else if (evt.getComponent().equals(tfNomUtilisateur) && !isFilledTF(tfNomUtilisateur, TXT_USERNAME)) {
            setCaretTF(tfNomUtilisateur);
        } else if (evt.getComponent().equals(tfEmail) && !isFilledTF(tfEmail, TXT_EMAIL)) {
            setCaretTF(tfEmail);
        } else if (evt.getComponent().equals(tfDateNaissance) && !isFilledTF(tfDateNaissance, TXT_DATE_NAISSANCE)) {
            setCaretTF(tfDateNaissance);
        } else if (evt.getComponent().equals(tfPassword) && !isFilledTF(tfPassword, TXT_PASSWORD)) {
            setCaretTF(tfPassword);
        } else if (evt.getComponent().equals(tfPasswordConfirm) && !isFilledTF(tfPasswordConfirm, TXT_CONFIRM_PASS)) {
            setCaretTF(tfPasswordConfirm);
        } else {
            return;
        }
    }//GEN-LAST:event_tfFieldsFocusGained

    /**
     * Listener général pour gérer le focus lost tous les champs texte
     */
    private void tfFieldsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfFieldsFocusLost
        addPlaceHolder(tfNom, TXT_NOM);
        addPlaceHolder(tfPrenom, TXT_PRENOM);
        addPlaceHolder(tfEmail, TXT_EMAIL);
        addPlaceHolder(tfDateNaissance, TXT_DATE_NAISSANCE);
        addPlaceHolder(tfNomUtilisateur, TXT_USERNAME);
    }//GEN-LAST:event_tfFieldsFocusLost

    /**
     * Listener général pour gérer le focus lost tous les champs "Mot de passe"
     */
    private void tfPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPasswordFocusLost
        if (evt.getComponent().equals(tfPassword)) {
            setPfFocusLostAction(tfPassword, TXT_PASSWORD);
        } else {
            setPfFocusLostAction(tfPasswordConfirm, TXT_CONFIRM_PASS);
        }
    }//GEN-LAST:event_tfPasswordFocusLost

    private void tfNomKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNomKeyPressed
        setTfKeyPressedAction(tfNom, TXT_NOM, evt);
        hideError(lblErreur, lblErreur2);
    }//GEN-LAST:event_tfNomKeyPressed

    /**
     * Listener général permettant de capter le clic de la souris sur chaque
     * champ texte (défini par evt.getComponent())
     */
    private void tfFieldsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfFieldsMouseClicked
        if (evt.getComponent().equals(tfNom) && !isFilledTF(tfNom, TXT_NOM)) {
            setCaretTF(tfNom);
        } else if (evt.getComponent().equals(tfPrenom) && !isFilledTF(tfPrenom, TXT_PRENOM)) {
            setCaretTF(tfPrenom);
        } else if (evt.getComponent().equals(tfNomUtilisateur) && !isFilledTF(tfNomUtilisateur, TXT_USERNAME)) {
            setCaretTF(tfNomUtilisateur);
        } else if (evt.getComponent().equals(tfEmail) && !isFilledTF(tfEmail, TXT_EMAIL)) {
            setCaretTF(tfEmail);
        } else if (evt.getComponent().equals(tfDateNaissance) && !isFilledTF(tfDateNaissance, TXT_DATE_NAISSANCE)) {
            setCaretTF(tfDateNaissance);
        } else if (evt.getComponent().equals(tfPassword) && !isFilledTF(tfPassword, TXT_PASSWORD)) {
            setCaretTF(tfPassword);
        } else if (evt.getComponent().equals(tfPasswordConfirm) && !isFilledTF(tfPasswordConfirm, TXT_CONFIRM_PASS)) {
            setCaretTF(tfPasswordConfirm);
        } else {
            return;
        }
    }//GEN-LAST:event_tfFieldsMouseClicked

    private void tfNomKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNomKeyReleased
        setTfKeyReleasedAction(tfNom, TXT_NOM);
    }//GEN-LAST:event_tfNomKeyReleased

    private void tfPrenomKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPrenomKeyPressed
        setTfKeyPressedAction(tfPrenom, TXT_PRENOM, evt);
        hideError(lblErreur, lblErreur2);
    }//GEN-LAST:event_tfPrenomKeyPressed

    private void tfPrenomKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPrenomKeyReleased
        setTfKeyReleasedAction(tfPrenom, TXT_PRENOM);
    }//GEN-LAST:event_tfPrenomKeyReleased

    private void tfEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfEmailKeyPressed
        setTfKeyPressedAction(tfEmail, TXT_EMAIL, evt);
        hideError(lblErreur, lblErreur2);
    }//GEN-LAST:event_tfEmailKeyPressed

    private void tfEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfEmailKeyReleased
        setTfKeyReleasedAction(tfEmail, TXT_EMAIL);
    }//GEN-LAST:event_tfEmailKeyReleased

    private void tfDateNaissanceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfDateNaissanceKeyPressed
        setTfKeyPressedAction(tfDateNaissance, TXT_DATE_NAISSANCE, evt);
        hideError(lblErreur, lblErreur2);
    }//GEN-LAST:event_tfDateNaissanceKeyPressed

    private void tfDateNaissanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfDateNaissanceKeyReleased
        setTfKeyReleasedAction(tfDateNaissance, TXT_DATE_NAISSANCE);
    }//GEN-LAST:event_tfDateNaissanceKeyReleased

    private void tfNomUtilisateurKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNomUtilisateurKeyPressed
        setTfKeyPressedAction(tfNomUtilisateur, TXT_USERNAME, evt);
        hideError(lblErreur, lblErreur2);
    }//GEN-LAST:event_tfNomUtilisateurKeyPressed

    private void tfNomUtilisateurKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNomUtilisateurKeyReleased
        setTfKeyReleasedAction(tfNomUtilisateur, TXT_USERNAME);
    }//GEN-LAST:event_tfNomUtilisateurKeyReleased

    private void tfPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPasswordKeyPressed
        setPfKeyPressedAction(tfPassword, TXT_PASSWORD, evt);
        hideError(lblErreur, lblErreur2);
    }//GEN-LAST:event_tfPasswordKeyPressed

    private void tfPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPasswordKeyReleased
        setPfKeyReleasedAction(tfPassword, TXT_PASSWORD);
    }//GEN-LAST:event_tfPasswordKeyReleased

    private void tfPasswordConfirmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPasswordConfirmKeyPressed
        setPfKeyPressedAction(tfPasswordConfirm, TXT_CONFIRM_PASS, evt);
        hideError(lblErreur, lblErreur2);
    }//GEN-LAST:event_tfPasswordConfirmKeyPressed

    private void tfPasswordConfirmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPasswordConfirmKeyReleased
        setPfKeyReleasedAction(tfPasswordConfirm, TXT_CONFIRM_PASS);
    }//GEN-LAST:event_tfPasswordConfirmKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                    FrmRegister dialog = new FrmRegister(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);                
                } catch(SQLException ex){
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnnuler;
    private javax.swing.JButton btnValider;
    private javax.swing.JLabel imgBackGround;
    private javax.swing.JLabel lblErreur;
    private javax.swing.JLabel lblErreur2;
    private javax.swing.JLabel lblInfos;
    private javax.swing.JLabel lblTitre;
    private javax.swing.JTextField tfDateNaissance;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfNom;
    private javax.swing.JTextField tfNomUtilisateur;
    private javax.swing.JPasswordField tfPassword;
    private javax.swing.JPasswordField tfPasswordConfirm;
    private javax.swing.JTextField tfPrenom;
    // End of variables declaration//GEN-END:variables

    /**
     * Méthode permettant d'ajouter un placeHolder à un champ texte.
     */
    private void addPlaceHolder(JTextField tf, String str) {
        if (tf.getText().length() == 0) {
            tf.setText(str);
            tf.setForeground(Color.LIGHT_GRAY);
        }
    }

    /**
     * Méthode permettant d'enlever un placeHolder après qu'il ait été ajouté.
     */
    private void removePlaceHolder(JTextField tf, String str) {
        if (tf.getText().equals(str)) {
            tf.setText("");
            tf.setForeground(Color.black);
        }
    }

    /**
     * Méthode permettant la validation du formulaire selon plusieurs critères.
     * soit : contrôle que tous les champs soient bien remplis, les mots de
     * passes doivent correspondre et l'e-mail doit respecter les standards du
     * REGEX (classe EmailValidator.java)
     */
    private boolean isValide() {
        EmailValidator emailValidator = new EmailValidator();
        if (tfNom.getText().equals(TXT_NOM) || tfPrenom.getText().equals(TXT_PRENOM) || tfEmail.getText().equals(TXT_EMAIL) || tfDateNaissance.getText().equals(TXT_DATE_NAISSANCE) || tfNomUtilisateur.getText().equals(TXT_USERNAME) || tfPassword.getText().equals(TXT_PASSWORD) || tfPasswordConfirm.getText().equals(TXT_CONFIRM_PASS)) {
            setError(lblErreur, MSG_FIELD_ERROR, lblErreur2, "");
            showError(lblErreur, lblErreur2);
            return false;
        }
        if (!emailValidator.validate(tfEmail.getText().trim())) {
            setError(lblErreur, MSG_EMAIL_ERROR, lblErreur2, "");
            showError(lblErreur, lblErreur2);
            tfEmail.setText("");
            addPlaceHolder(tfEmail, TXT_EMAIL);
            return false;
        }
        if (!checkDate()) {
            return false;
        }
        if (!tfNomUtilisateur.getText().trim().matches(LETTER_REGEX_PATTERN)) {
            setError(lblErreur, MSG_USER_ERROR, lblErreur2, "");
            showError(lblErreur, lblErreur2);
            tfNomUtilisateur.setText("");
            addPlaceHolder(tfNomUtilisateur, TXT_USERNAME);
            return false;
        }
        if (!tfPassword.getText().equals(tfPasswordConfirm.getText())) {
            setError(lblErreur, MSG_PASS_ERROR, lblErreur2, "");
            showError(lblErreur, lblErreur2);
            tfPassword.setText("");
            tfPasswordConfirm.setText("");
            tfPassword.setEchoChar((char) 0);
            addPlaceHolder(tfPassword, TXT_PASSWORD);
            tfPasswordConfirm.setEchoChar((char) 0);
            addPlaceHolder(tfPasswordConfirm, TXT_CONFIRM_PASS);
            return false;
        }
        for (int i = 0; i < lstUtilisateurs.size(); i++) {
            if (tfNomUtilisateur.getText().toLowerCase().equals(((Utilisateur) lstUtilisateurs.get(i)).getUsername().toLowerCase())) {
                setError(lblErreur, MSG_USERNAME_ERROR, lblErreur2, "");
                showError(lblErreur, lblErreur2);
                tfNomUtilisateur.setText("");
                addPlaceHolder(tfNomUtilisateur, TXT_USERNAME);
                return false;
            }
        }
        return true;
    }

    /**
     * Méthode permettant de valider la saisie d'une date de naissance.
     */
    private boolean checkDate() {
        String dateText = tfDateNaissance.getText();
        if (dateText.length() < 10) { // le format valide d'une date prend 10 caractères. Si l'utilisateur n'a pas saisi une date valide alors on return false
            setError(lblErreur, MSG_BIRTHDATE_ERROR, lblErreur2, MSG_BIRTHDATE_ERROR2);
            showError(lblErreur, lblErreur2);
            tfDateNaissance.setText("");
            addPlaceHolder(tfDateNaissance, TXT_DATE_NAISSANCE);
            return false;
        }
        int day = Integer.parseInt(dateText.substring(0, 2));
        int month = Integer.parseInt(dateText.substring(3, 5));
        int year = Integer.parseInt(dateText.substring(6, 10));
        try {
            if (day <= 31 && month <= 12 && year >= 1900 && year <= 2099) {
                Date d = sdf.parse(dateText);
                Date now = new Date();
                long diff = now.getTime() - d.getTime();
                if (diff > 0) {
                    tfDateNaissance.setForeground(Color.black);
                    return true;
                }
            }
        } catch (ParseException ex) {
            setError(lblErreur, MSG_BIRTHDATE_ERROR, lblErreur2, MSG_BIRTHDATE_ERROR2);
            showError(lblErreur, lblErreur2);
            tfDateNaissance.setText("");
            addPlaceHolder(tfDateNaissance, TXT_DATE_NAISSANCE);
            return false;
        }
        lblErreur.setText(MSG_BIRTHDATE_ERROR);
        lblErreur2.setText(MSG_BIRTHDATE_ERROR2);
        showError(lblErreur, lblErreur2);
        tfDateNaissance.setText("");
        addPlaceHolder(tfDateNaissance, TXT_DATE_NAISSANCE);
        return false;
    }

    /**
     * Méthode permettant de gérer la position et la couleur du caret pour un
     * champ texte.
     */
    private void setCaretTF(JTextField tf) {
        tf.setCaretPosition(0);
        tf.setCaretColor(Color.black);
    }

    /**
     * Méthode permettant de valider si un champ texte est bien rempli pour la
     * validation des caret (curseur de sélection).
     */
    private boolean isFilledTF(JTextField tf, String txt) {
        if (tf.getText().length() > 0 && !tf.getText().equals(txt)) {
            return true;
        }
        return false;
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les JTextField
     * sur la base de l'event KeyReleased.
     */
    private void setTfKeyReleasedAction(JTextField tf, String txt) {
        if (tf.getText().length() == 0) {
            addPlaceHolder(tf, txt);
            tf.setCaretPosition(0);
        }
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les
     * JPasswordField sur la base de l'event KeyReleased.
     */
    private void setPfKeyReleasedAction(JPasswordField tpf, String txt) {
        if (tpf.getText().length() == 0) {
            tpf.setEchoChar((char) 0);
            addPlaceHolder(tpf, txt);
            tpf.setCaretPosition(0);
        }
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les JTextField
     * sur la base de l'event KeyPressed.
     */
    private void setTfKeyPressedAction(JTextField tf, String txt, java.awt.event.KeyEvent evt) {
        if (tf.getText().equals(txt) && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || tf.getText().equals(txt) && evt.getKeyCode() == KeyEvent.VK_DELETE) {
            evt.consume();
            return;
        }
        removePlaceHolder(tf, txt);
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les
     * JPasswordField sur la base de l'event KeyPressed.
     */
    private void setPfKeyPressedAction(JPasswordField tpf, String txt, java.awt.event.KeyEvent evt) {
        tpf.setEchoChar('*');
        if (tpf.getText().equals(txt) && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || tpf.getText().equals(txt) && evt.getKeyCode() == KeyEvent.VK_DELETE) {
            tpf.setEchoChar((char) 0);
            evt.consume();
            return;
        }
        removePlaceHolder(tpf, txt);
    }

    /**
     * Méthode permettant de gérer une action commune pour tous les
     * JPasswordField sur la base de l'event Focus Lost.
     */
    private void setPfFocusLostAction(JPasswordField tpf, String txt) {
        if (tpf.getText().length() == 0) {
            tpf.setEchoChar((char) 0);
        }
        addPlaceHolder(tpf, txt);
    }

    /**
     * Méthode qui gère la configuration initiale de la fenêtre (celle au
     * chargement de l'application).
     */
    private void setStartUpConfig() {
        tfPassword.setEchoChar((char) 0); // méthode permettant de rendre le mot de passe d'un champ JPasswordField visible 
        tfPasswordConfirm.setEchoChar((char) 0);
    }

    /**
     * Méthode purement réutilisable pour enlever le label d'erreur ou de
     * validation après correction de l'utilisateur sur un texfield.
     */
    private void hideError(JLabel lblErreur, JLabel lblErreur2) {
        lblErreur.setVisible(false);
        lblErreur2.setVisible(false);
    }

    /**
     * Méthode purement réutilisable pour afficher le label d'erreur ou de
     * validation après correction de l'utilisateur sur un texfield.
     */
    private void showError(JLabel lblErreur, JLabel lblErreur2) {
        lblErreur.setVisible(true);
        lblErreur2.setVisible(true);
    }

    /**
     * Méthode purement réutilisable pour assigner un message d'erreur à un
     * label.
     */
    private void setError(JLabel lblErreur, String txtErreur, JLabel lblErreur2, String txtErreur2) {
        lblErreur.setText(txtErreur);
        lblErreur2.setText(txtErreur2);
    }

    /**
     * Méthode qui charge l'ArrayList des utilisateurs.
     */
    private void loadUsers() throws SQLException{
        lstUtilisateurs = UtilisateurDAO.getUsers();
    }
}
