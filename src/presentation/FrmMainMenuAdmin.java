/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import base.ClubDAO;
import base.CoachDAO;
import base.CoursDAO;
import base.EmailValidator;
import base.UtilisateurDAO;
import com.toedter.calendar.JDateChooser;
import domaine.Club;
import domaine.Cours;
import domaine.Coach;
import domaine.Utilisateur;
import java.awt.Color;
import java.awt.Component;
import java.awt.FocusTraversalPolicy;
import java.awt.Frame;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JComboBox;
import javax.swing.JLabel;

/**
 *
 * @author Edouard Diep
 */
public class FrmMainMenuAdmin extends javax.swing.JFrame {

    private static final String TXT_USER_CONFIRM = "Merci ! L'utilisateur a bien été enregistré.";
    private static final String TXT_USER_ERROR = "L'utilisateur doit au moins contenir une lettre !";
    private static final String TXT_EXISTING_USER_ERROR = "Erreur : Ce nom d'utilisateur est déjà pris !";
    private static final String TXT_COURS_MODIFIED = "Merci ! Le nombre de participants a bien été mis à jour.";
    private static final String TXT_COURS_DELETE = "Merci ! Le cours a bien été supprimé de la base de données.";
    private static final String TXT_COURS_ADD = "Merci ! Le cours a bien été ajouté à la base de données.";
    private static final String TXT_DATE_SELECT_ERROR = "Erreur : Veuillez sélectionner une date dans le calendrier !";
    private static final String TXT_CB_CLUB_ERROR = "Erreur : Veuillez sélectionner un club dans la liste !";
    private static final String TXT_CB_COURS_ERROR = "Erreur : Veuillez sélectionner un cours dans la liste !";
    private static final String TXT_NB_MAX_ERROR = "Erreur : Veuillez indiquer un nombre maximal de participants !";
    private static final String TXT_FIELD_ERROR = "Erreur : Veuillez remplir tous les champs !";
    private static final String TXT_PASS_ERROR = "Erreur : les mots de passe ne correspondent pas !";
    private static final String TXT_RANG_ERROR = "Erreur : Veuillez sélectionner un rang !";
    private static final String TXT_EMAIL_ERROR = "Erreur : L'email n'est pas valide !";
    private static final String TXT_BIRTHDATE_ERROR = "Erreur : La date de naissance n'est pas valide !";
    private static final String TXT_ADD_NAME_ERROR = "Erreur : le nom du cours ne peut contenir que des lettres !";
    private static final String TXT_ADD_HOUR_ERROR = "Erreur : Veuillez sélectionner une heure valide !";
    private static final String TXT_ADD_COACH_ERROR = "Erreur : Veuillez sélectionner un coach dans la liste !";
    private static final String TXT_ADD_PART_ERROR = "Le nb de participants doit être compris entre 1 et 30 !";
    private static final String DEFAULT_BIRTHDATE = "01.01.1969";
    private static final String LETTER_REGEX_PATTERN = ".*[a-zA-Z].*";
    private static final String DIGIT_REGEX_PATTERN = "(.)*(\\d)(.)*";
    private static SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
    private FrmMainMenuUser frmMainUser;
    private FrmLstCours frmListCours;
    private boolean isRememberChecked;

    private static Utilisateur uCourant; // récupèration de l'utilisateur courant actuellement connecté à l'application

    private ArrayList<Utilisateur> lstUtilisateurs;
    private ArrayList<Club> lstClubs;
    private ArrayList<Cours> lstCours;
    private ArrayList<Coach> lstCoachs;

    /**
     * Creates new form FrmMenuPrincipal
     */
    public FrmMainMenuAdmin(java.awt.Frame parent, Utilisateur u) throws SQLException {
        initComponents();
        uCourant = u;
        setStartUpConfig(); // setter de la configuration initiale lors de l'ouverture de la fenêtre de l'application
        loadClubs();
        loadUsers();
        loadCours();
        loadCoachs();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        lblBienvenue = new javax.swing.JLabel();
        lblTitre = new javax.swing.JLabel();
        btnDeconnexion = new javax.swing.JButton();
        tabPanAdmin = new javax.swing.JTabbedPane();
        pnlUpdatePlanning = new javax.swing.JPanel();
        lblTitreModifyClub2 = new javax.swing.JLabel();
        lblTitreModifyClub = new javax.swing.JLabel();
        cbClubs = new javax.swing.JComboBox<>();
        btnPlanning = new javax.swing.JButton();
        lblSelectClub = new javax.swing.JLabel();
        imgLogoBarbell = new javax.swing.JLabel();
        lblErreur = new javax.swing.JLabel();
        imgErrorModify = new javax.swing.JLabel();
        pnlAddDeleteCours = new javax.swing.JPanel();
        pnlAddCours = new javax.swing.JPanel();
        lbNomCoursAdd = new javax.swing.JLabel();
        tfNomCoursAdd = new javax.swing.JTextField();
        lblDateCoursAdd = new javax.swing.JLabel();
        calDateCoursAdd = new com.toedter.calendar.JDateChooser();
        lblHeureCoursAdd = new javax.swing.JLabel();
        cbHeureCours = new javax.swing.JComboBox<>();
        cbMinuteCours = new javax.swing.JComboBox<>();
        lblCoachCoursAdd = new javax.swing.JLabel();
        cbCoachsAdd = new javax.swing.JComboBox<>();
        lblNbMaxPartCoursAdd = new javax.swing.JLabel();
        tfNbMaxParticipantsAdd = new javax.swing.JTextField();
        lblClubCoursAdd = new javax.swing.JLabel();
        cbClubsAdd = new javax.swing.JComboBox<>();
        btnAjouterCours = new javax.swing.JButton();
        imgErrorAdd = new javax.swing.JLabel();
        lblConfirmationAdd = new javax.swing.JLabel();
        pnlDeleteCours = new javax.swing.JPanel();
        lblCoursDelete = new javax.swing.JLabel();
        imgErrorDelete = new javax.swing.JLabel();
        imgConfirmationDelete = new javax.swing.JLabel();
        cbCoursDelete = new javax.swing.JComboBox<>();
        btnSupprimerCours = new javax.swing.JButton();
        lblConfirmationDelete = new javax.swing.JLabel();
        pnlUpdateNbMaxInscr = new javax.swing.JPanel();
        lblTitreNbMax = new javax.swing.JLabel();
        lblTitreNbMax2 = new javax.swing.JLabel();
        cbCours = new javax.swing.JComboBox<>();
        lblNewNbInscr = new javax.swing.JLabel();
        lblSelectCours = new javax.swing.JLabel();
        tfNbInscrits = new javax.swing.JTextField();
        btnValider = new javax.swing.JButton();
        imgCoursModified = new javax.swing.JLabel();
        lblCoursModified = new javax.swing.JLabel();
        imgErrorUpdate = new javax.swing.JLabel();
        pnlUpdateUser = new javax.swing.JPanel();
        pnlCreateUser = new javax.swing.JPanel();
        lblTitleNewUser = new javax.swing.JLabel();
        lblNewPass = new javax.swing.JLabel();
        btnCreateUser = new javax.swing.JButton();
        lblNewPassConfirm = new javax.swing.JLabel();
        lblNewUser = new javax.swing.JLabel();
        tfNewUser = new javax.swing.JTextField();
        lblConfirmationUser = new javax.swing.JLabel();
        imgConfirmationUser = new javax.swing.JLabel();
        imgErrorUser = new javax.swing.JLabel();
        tfNewPassConfirm = new javax.swing.JPasswordField();
        tfNewPass = new javax.swing.JPasswordField();
        lblNewRang = new javax.swing.JLabel();
        chkNewRangUser = new javax.swing.JRadioButton();
        chkNewRangAdmin = new javax.swing.JRadioButton();
        pnlModifyUser = new javax.swing.JPanel();
        lblModifyUser = new javax.swing.JLabel();
        cbListUsers = new javax.swing.JComboBox<>();
        lblSelectUser = new javax.swing.JLabel();
        pnlUserInfos = new javax.swing.JPanel();
        lblUsernameInfo = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        tfPassword = new javax.swing.JPasswordField();
        lblPasswordInfo = new javax.swing.JLabel();
        lblPrenomInfo = new javax.swing.JLabel();
        tfPrenom = new javax.swing.JTextField();
        lblNomInfo = new javax.swing.JLabel();
        tfNom = new javax.swing.JTextField();
        lblEmailInfo = new javax.swing.JLabel();
        tfEmail = new javax.swing.JTextField();
        lblDateNaissanceInfo = new javax.swing.JLabel();
        tfDateNaissance = new javax.swing.JTextField();
        chkAfficher = new javax.swing.JCheckBox();
        lblRangInfo = new javax.swing.JLabel();
        chkInfoRangAdmin = new javax.swing.JRadioButton();
        chkInfoRangUser = new javax.swing.JRadioButton();
        btnEnregistrerUpdate = new javax.swing.JButton();
        btnModifyUser = new javax.swing.JButton();
        btnAnnuler = new javax.swing.JButton();
        lblPassword = new javax.swing.JLabel();
        btnAccesUser = new javax.swing.JButton();
        lblAdmin = new javax.swing.JLabel();
        chkRemember = new javax.swing.JCheckBox();
        imgBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Menu administrateur");
        setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{btnAccesUser, btnDeconnexion, tabPanAdmin, pnlUpdatePlanning, pnlUpdateNbMaxInscr, pnlModifyUser, pnlAddDeleteCours})
        );
        setLocation(new java.awt.Point(550, 200));
        setMinimumSize(new java.awt.Dimension(625, 645));
        setName("FrmMainMenuAdmin"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        lblBienvenue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBienvenue.setForeground(new java.awt.Color(255, 51, 0));
        getContentPane().add(lblBienvenue);
        lblBienvenue.setBounds(10, 10, 320, 20);

        lblTitre.setFont(new java.awt.Font("Monospaced", 1, 28)); // NOI18N
        lblTitre.setForeground(new java.awt.Color(204, 0, 0));
        lblTitre.setText("Menu administrateur");
        getContentPane().add(lblTitre);
        lblTitre.setBounds(150, 60, 340, 38);

        btnDeconnexion.setText("Se déconnecter");
        btnDeconnexion.setToolTipText("Se déconnecter de l'application");
        btnDeconnexion.setBorder(null);
        btnDeconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeconnexionActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeconnexion);
        btnDeconnexion.setBounds(7, 27, 100, 20);

        tabPanAdmin.setBackground(new java.awt.Color(0, 0, 0));
        tabPanAdmin.setForeground(new java.awt.Color(51, 153, 0));
        tabPanAdmin.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{btnAccesUser, btnDeconnexion, pnlUpdatePlanning, pnlAddDeleteCours, pnlUpdateNbMaxInscr, pnlUpdateUser})
        );
        tabPanAdmin.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N

        pnlUpdatePlanning.setBackground(new java.awt.Color(0, 0, 0));
        pnlUpdatePlanning.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{cbClubs, btnPlanning})
        );
        pnlUpdatePlanning.setLayout(null);

        lblTitreModifyClub2.setFont(new java.awt.Font("Monospaced", 1, 17)); // NOI18N
        lblTitreModifyClub2.setForeground(new java.awt.Color(204, 204, 204));
        lblTitreModifyClub2.setText("Pour quel club souhaitez-vous");
        lblTitreModifyClub2.setToolTipText("");
        pnlUpdatePlanning.add(lblTitreModifyClub2);
        lblTitreModifyClub2.setBounds(10, 10, 450, 24);

        lblTitreModifyClub.setFont(new java.awt.Font("Monospaced", 1, 17)); // NOI18N
        lblTitreModifyClub.setForeground(new java.awt.Color(204, 204, 204));
        lblTitreModifyClub.setText("modifier le planning des cours ?");
        lblTitreModifyClub.setToolTipText("");
        pnlUpdatePlanning.add(lblTitreModifyClub);
        lblTitreModifyClub.setBounds(10, 30, 450, 24);

        cbClubs.setToolTipText("Liste des clubs");
        pnlUpdatePlanning.add(cbClubs);
        cbClubs.setBounds(40, 120, 210, 30);

        btnPlanning.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        btnPlanning.setText("Modifier le planning");
        btnPlanning.setToolTipText("Modifier le planning");
        btnPlanning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlanningActionPerformed(evt);
            }
        });
        pnlUpdatePlanning.add(btnPlanning);
        btnPlanning.setBounds(340, 100, 200, 50);

        lblSelectClub.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblSelectClub.setForeground(new java.awt.Color(204, 204, 204));
        lblSelectClub.setText("1. Veuillez sélectionner un club :");
        lblSelectClub.setToolTipText("");
        pnlUpdatePlanning.add(lblSelectClub);
        lblSelectClub.setBounds(30, 90, 450, 20);

        imgLogoBarbell.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_frmMainMenuAdmin.gif"))); // NOI18N
        pnlUpdatePlanning.add(imgLogoBarbell);
        imgLogoBarbell.setBounds(340, 170, 210, 150);

        lblErreur.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblErreur.setForeground(new java.awt.Color(255, 0, 0));
        lblErreur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlUpdatePlanning.add(lblErreur);
        lblErreur.setBounds(30, 330, 410, 30);

        imgErrorModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        pnlUpdatePlanning.add(imgErrorModify);
        imgErrorModify.setBounds(200, 270, 70, 60);

        tabPanAdmin.addTab("Modifier le planning des cours", pnlUpdatePlanning);

        pnlAddDeleteCours.setBackground(new java.awt.Color(0, 0, 0));
        pnlAddDeleteCours.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{tfNomCoursAdd, calDateCoursAdd, cbHeureCours, cbMinuteCours, cbCoachsAdd, tfNbMaxParticipantsAdd, cbClubsAdd, btnAjouterCours, cbCoursDelete, btnSupprimerCours})
        );
        pnlAddDeleteCours.setLayout(null);

        pnlAddCours.setBackground(new java.awt.Color(0, 0, 0));
        pnlAddCours.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        pnlAddCours.setLayout(null);

        lbNomCoursAdd.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lbNomCoursAdd.setForeground(new java.awt.Color(204, 204, 204));
        lbNomCoursAdd.setText("1. Entrer le nom d'un cours");
        lbNomCoursAdd.setToolTipText("");
        pnlAddCours.add(lbNomCoursAdd);
        lbNomCoursAdd.setBounds(30, 20, 240, 20);

        tfNomCoursAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfNomCoursAddFocusGained(evt);
            }
        });
        pnlAddCours.add(tfNomCoursAdd);
        tfNomCoursAdd.setBounds(50, 40, 180, 30);

        lblDateCoursAdd.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblDateCoursAdd.setForeground(new java.awt.Color(204, 204, 204));
        lblDateCoursAdd.setText("2. Sélectionner une date");
        lblDateCoursAdd.setToolTipText("");
        pnlAddCours.add(lblDateCoursAdd);
        lblDateCoursAdd.setBounds(30, 80, 240, 20);

        calDateCoursAdd.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calDateCoursAddPropertyChange(evt);
            }
        });
        pnlAddCours.add(calDateCoursAdd);
        calDateCoursAdd.setBounds(50, 100, 130, 30);

        lblHeureCoursAdd.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblHeureCoursAdd.setForeground(new java.awt.Color(204, 204, 204));
        lblHeureCoursAdd.setText("3. Entrez l'heure du cours");
        lblHeureCoursAdd.setToolTipText("");
        pnlAddCours.add(lblHeureCoursAdd);
        lblHeureCoursAdd.setBounds(30, 140, 240, 20);

        cbHeureCours.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbHeureCoursItemStateChanged(evt);
            }
        });
        pnlAddCours.add(cbHeureCours);
        cbHeureCours.setBounds(50, 160, 50, 20);

        cbMinuteCours.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbHeureCoursItemStateChanged(evt);
            }
        });
        pnlAddCours.add(cbMinuteCours);
        cbMinuteCours.setBounds(110, 160, 50, 20);

        lblCoachCoursAdd.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblCoachCoursAdd.setForeground(new java.awt.Color(204, 204, 204));
        lblCoachCoursAdd.setText("4. Sélectionner un coach");
        pnlAddCours.add(lblCoachCoursAdd);
        lblCoachCoursAdd.setBounds(30, 195, 210, 18);

        cbCoachsAdd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbAddItemStateChanged(evt);
            }
        });
        pnlAddCours.add(cbCoachsAdd);
        cbCoachsAdd.setBounds(50, 215, 180, 30);

        lblNbMaxPartCoursAdd.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblNbMaxPartCoursAdd.setForeground(new java.awt.Color(204, 204, 204));
        lblNbMaxPartCoursAdd.setText("5. Nombre max de participants");
        lblNbMaxPartCoursAdd.setToolTipText("");
        pnlAddCours.add(lblNbMaxPartCoursAdd);
        lblNbMaxPartCoursAdd.setBounds(30, 250, 240, 20);
        pnlAddCours.add(tfNbMaxParticipantsAdd);
        tfNbMaxParticipantsAdd.setBounds(50, 270, 50, 30);

        lblClubCoursAdd.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblClubCoursAdd.setForeground(new java.awt.Color(204, 204, 204));
        lblClubCoursAdd.setText("6. Sélectionner un club");
        lblClubCoursAdd.setToolTipText("");
        pnlAddCours.add(lblClubCoursAdd);
        lblClubCoursAdd.setBounds(30, 300, 240, 20);

        cbClubsAdd.setToolTipText("Liste des clubs");
        cbClubsAdd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbAddItemStateChanged(evt);
            }
        });
        pnlAddCours.add(cbClubsAdd);
        cbClubsAdd.setBounds(50, 320, 180, 30);

        btnAjouterCours.setText("Ajouter le cours au club");
        btnAjouterCours.setToolTipText("Ajouter un cours");
        btnAjouterCours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjouterCoursActionPerformed(evt);
            }
        });
        pnlAddCours.add(btnAjouterCours);
        btnAjouterCours.setBounds(50, 360, 180, 30);

        imgErrorAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        pnlAddCours.add(imgErrorAdd);
        imgErrorAdd.setBounds(230, 340, 70, 50);

        lblConfirmationAdd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblConfirmationAdd.setForeground(new java.awt.Color(255, 0, 0));
        lblConfirmationAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlAddCours.add(lblConfirmationAdd);
        lblConfirmationAdd.setBounds(10, 390, 290, 40);

        pnlAddDeleteCours.add(pnlAddCours);
        pnlAddCours.setBounds(0, 0, 310, 440);

        pnlDeleteCours.setBackground(new java.awt.Color(0, 0, 0));
        pnlDeleteCours.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 255, 255), new java.awt.Color(255, 255, 255)));
        pnlDeleteCours.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{tfNewUser, tfNewPassConfirm, tfNewPassConfirm, btnCreateUser, cbListUsers, btnEnregistrerUpdate})
        );
        pnlDeleteCours.setLayout(null);

        lblCoursDelete.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblCoursDelete.setForeground(new java.awt.Color(204, 204, 204));
        lblCoursDelete.setText("1. Sélectionner un cours");
        lblCoursDelete.setToolTipText("");
        pnlDeleteCours.add(lblCoursDelete);
        lblCoursDelete.setBounds(30, 40, 240, 20);

        imgErrorDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        pnlDeleteCours.add(imgErrorDelete);
        imgErrorDelete.setBounds(110, 270, 70, 60);

        imgConfirmationDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_frmMainMenuAdminUpdateConfirm.png"))); // NOI18N
        pnlDeleteCours.add(imgConfirmationDelete);
        imgConfirmationDelete.setBounds(110, 260, 80, 80);

        cbCoursDelete.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cbCoursDelete.setToolTipText("Liste des cours");
        cbCoursDelete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCoursDeleteItemStateChanged(evt);
            }
        });
        pnlDeleteCours.add(cbCoursDelete);
        cbCoursDelete.setBounds(10, 70, 300, 30);

        btnSupprimerCours.setText("Supprimer le cours sélectionné");
        btnSupprimerCours.setToolTipText("Supprimer un cours");
        btnSupprimerCours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupprimerCoursActionPerformed(evt);
            }
        });
        pnlDeleteCours.add(btnSupprimerCours);
        btnSupprimerCours.setBounds(53, 173, 200, 50);

        lblConfirmationDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblConfirmationDelete.setForeground(new java.awt.Color(51, 153, 255));
        lblConfirmationDelete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlDeleteCours.add(lblConfirmationDelete);
        lblConfirmationDelete.setBounds(20, 310, 280, 50);

        pnlAddDeleteCours.add(pnlDeleteCours);
        pnlDeleteCours.setBounds(310, 0, 320, 440);

        tabPanAdmin.addTab("Ajouter/Supprimer un cours collectif", pnlAddDeleteCours);

        pnlUpdateNbMaxInscr.setBackground(new java.awt.Color(0, 0, 0));
        pnlUpdateNbMaxInscr.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{cbCours, tfNbInscrits, btnValider})
        );
        pnlUpdateNbMaxInscr.setLayout(null);

        lblTitreNbMax.setFont(new java.awt.Font("Monospaced", 1, 17)); // NOI18N
        lblTitreNbMax.setForeground(new java.awt.Color(204, 204, 204));
        lblTitreNbMax.setText("Pour quel cours souhaitez-vous");
        lblTitreNbMax.setToolTipText("");
        pnlUpdateNbMaxInscr.add(lblTitreNbMax);
        lblTitreNbMax.setBounds(10, 10, 450, 24);

        lblTitreNbMax2.setFont(new java.awt.Font("Monospaced", 1, 17)); // NOI18N
        lblTitreNbMax2.setForeground(new java.awt.Color(204, 204, 204));
        lblTitreNbMax2.setText("modifier le nombre d'inscriptions ?");
        lblTitreNbMax2.setToolTipText("");
        pnlUpdateNbMaxInscr.add(lblTitreNbMax2);
        lblTitreNbMax2.setBounds(10, 30, 450, 24);

        cbCours.setToolTipText("Liste des cours");
        cbCours.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCoursItemStateChanged(evt);
            }
        });
        pnlUpdateNbMaxInscr.add(cbCours);
        cbCours.setBounds(40, 100, 420, 30);

        lblNewNbInscr.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblNewNbInscr.setForeground(new java.awt.Color(204, 204, 204));
        lblNewNbInscr.setText("2. Indiquer le nouveau nombre max. d'inscrits :");
        lblNewNbInscr.setToolTipText("");
        pnlUpdateNbMaxInscr.add(lblNewNbInscr);
        lblNewNbInscr.setBounds(30, 160, 450, 20);

        lblSelectCours.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblSelectCours.setForeground(new java.awt.Color(204, 204, 204));
        lblSelectCours.setText("1. Sélectionner un cours :");
        lblSelectCours.setToolTipText("");
        pnlUpdateNbMaxInscr.add(lblSelectCours);
        lblSelectCours.setBounds(30, 70, 450, 20);

        tfNbInscrits.setToolTipText("Modifier le nombre max. d'inscrits");
        tfNbInscrits.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNbInscritsKeyPressed(evt);
            }
        });
        pnlUpdateNbMaxInscr.add(tfNbInscrits);
        tfNbInscrits.setBounds(40, 190, 70, 30);

        btnValider.setText("Valider les modifications");
        btnValider.setToolTipText("Enregistrer les modifications");
        btnValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValiderActionPerformed(evt);
            }
        });
        pnlUpdateNbMaxInscr.add(btnValider);
        btnValider.setBounds(40, 240, 210, 23);

        imgCoursModified.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_frmMainMenuAdminUser.png"))); // NOI18N
        pnlUpdateNbMaxInscr.add(imgCoursModified);
        imgCoursModified.setBounds(290, 280, 60, 60);

        lblCoursModified.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCoursModified.setForeground(new java.awt.Color(51, 153, 255));
        lblCoursModified.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlUpdateNbMaxInscr.add(lblCoursModified);
        lblCoursModified.setBounds(30, 340, 570, 50);

        imgErrorUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        pnlUpdateNbMaxInscr.add(imgErrorUpdate);
        imgErrorUpdate.setBounds(280, 270, 70, 60);

        tabPanAdmin.addTab("Modifier le nombre max de participants", pnlUpdateNbMaxInscr);

        pnlUpdateUser.setBackground(new java.awt.Color(0, 0, 0));
        pnlUpdateUser.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{lblTitleNewUser, lblNewUser, lblNewPass, lblNewPassConfirm, btnCreateUser, cbListUsers, tfUsername, tfPassword, chkAfficher, tfPrenom, tfNom, tfEmail, tfDateNaissance, btnEnregistrerUpdate})
        );
        pnlUpdateUser.setLayout(new javax.swing.BoxLayout(pnlUpdateUser, javax.swing.BoxLayout.X_AXIS));

        pnlCreateUser.setBackground(new java.awt.Color(0, 0, 0));
        pnlCreateUser.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        pnlCreateUser.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{tfNewUser, tfNewPass, tfNewPassConfirm, chkNewRangUser, chkNewRangAdmin, btnCreateUser})
        );
        pnlCreateUser.setLayout(null);

        lblTitleNewUser.setBackground(new java.awt.Color(0, 0, 0));
        lblTitleNewUser.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        lblTitleNewUser.setForeground(new java.awt.Color(204, 204, 204));
        lblTitleNewUser.setText("Créer un nouvel utilisateur");
        pnlCreateUser.add(lblTitleNewUser);
        lblTitleNewUser.setBounds(20, 10, 270, 22);

        lblNewPass.setBackground(new java.awt.Color(0, 0, 0));
        lblNewPass.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNewPass.setForeground(new java.awt.Color(204, 204, 204));
        lblNewPass.setText("Mot de passe");
        pnlCreateUser.add(lblNewPass);
        lblNewPass.setBounds(20, 148, 110, 15);

        btnCreateUser.setText("Créer l'utilisateur");
        btnCreateUser.setToolTipText("Créer l'utilisateur");
        btnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserActionPerformed(evt);
            }
        });
        pnlCreateUser.add(btnCreateUser);
        btnCreateUser.setBounds(20, 280, 270, 50);

        lblNewPassConfirm.setBackground(new java.awt.Color(0, 0, 0));
        lblNewPassConfirm.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNewPassConfirm.setForeground(new java.awt.Color(204, 204, 204));
        lblNewPassConfirm.setText("Confirmation");
        pnlCreateUser.add(lblNewPassConfirm);
        lblNewPassConfirm.setBounds(20, 188, 90, 10);

        lblNewUser.setBackground(new java.awt.Color(0, 0, 0));
        lblNewUser.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNewUser.setForeground(new java.awt.Color(204, 204, 204));
        lblNewUser.setText("Nom d'utilisateur");
        pnlCreateUser.add(lblNewUser);
        lblNewUser.setBounds(20, 85, 110, 15);

        tfNewUser.setToolTipText("Identifiant");
        tfNewUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlCreateUser.add(tfNewUser);
        tfNewUser.setBounds(140, 80, 150, 30);

        lblConfirmationUser.setBackground(new java.awt.Color(0, 0, 0));
        lblConfirmationUser.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblConfirmationUser.setForeground(new java.awt.Color(204, 204, 204));
        lblConfirmationUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConfirmationUser.setText("Merci ! L'utilisateur a bien été enregistré.");
        pnlCreateUser.add(lblConfirmationUser);
        lblConfirmationUser.setBounds(-10, 390, 330, 20);

        imgConfirmationUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_frmMainMenuAdminUser.png"))); // NOI18N
        pnlCreateUser.add(imgConfirmationUser);
        imgConfirmationUser.setBounds(130, 330, 60, 70);

        imgErrorUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        pnlCreateUser.add(imgErrorUser);
        imgErrorUser.setBounds(120, 330, 70, 60);

        tfNewPassConfirm.setToolTipText("Confirmer le mot de passe");
        tfNewPassConfirm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlCreateUser.add(tfNewPassConfirm);
        tfNewPassConfirm.setBounds(140, 180, 150, 30);

        tfNewPass.setToolTipText("Mot de passe");
        tfNewPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlCreateUser.add(tfNewPass);
        tfNewPass.setBounds(140, 140, 150, 30);

        lblNewRang.setBackground(new java.awt.Color(0, 0, 0));
        lblNewRang.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNewRang.setForeground(new java.awt.Color(255, 255, 255));
        lblNewRang.setText("Rang");
        pnlCreateUser.add(lblNewRang);
        lblNewRang.setBounds(20, 235, 110, 14);

        chkNewRangUser.setBackground(new java.awt.Color(0, 0, 0));
        chkNewRangUser.setForeground(new java.awt.Color(0, 204, 255));
        chkNewRangUser.setText("User");
        pnlCreateUser.add(chkNewRangUser);
        chkNewRangUser.setBounds(140, 230, 50, 23);

        chkNewRangAdmin.setBackground(new java.awt.Color(0, 0, 0));
        chkNewRangAdmin.setForeground(new java.awt.Color(153, 0, 0));
        chkNewRangAdmin.setText("Admin");
        pnlCreateUser.add(chkNewRangAdmin);
        chkNewRangAdmin.setBounds(220, 230, 60, 23);

        pnlUpdateUser.add(pnlCreateUser);

        pnlModifyUser.setBackground(new java.awt.Color(0, 0, 0));
        pnlModifyUser.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 255, 255), new java.awt.Color(255, 255, 255)));
        pnlModifyUser.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{tfNewUser, tfNewPassConfirm, tfNewPassConfirm, btnCreateUser, cbListUsers, btnEnregistrerUpdate})
        );
        pnlModifyUser.setLayout(null);

        lblModifyUser.setBackground(new java.awt.Color(0, 0, 0));
        lblModifyUser.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        lblModifyUser.setForeground(new java.awt.Color(204, 204, 204));
        lblModifyUser.setText("Modifier un utilisateur");
        pnlModifyUser.add(lblModifyUser);
        lblModifyUser.setBounds(40, 10, 240, 22);

        cbListUsers.setToolTipText("Liste des utilisateurs de l'application");
        pnlModifyUser.add(cbListUsers);
        cbListUsers.setBounds(20, 80, 140, 30);

        lblSelectUser.setBackground(new java.awt.Color(0, 0, 0));
        lblSelectUser.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblSelectUser.setForeground(new java.awt.Color(204, 204, 204));
        lblSelectUser.setText("Sélectionner un utilisateur :");
        pnlModifyUser.add(lblSelectUser);
        lblSelectUser.setBounds(20, 50, 290, 22);

        pnlUserInfos.setBackground(new java.awt.Color(102, 102, 102));
        pnlUserInfos.setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[]{tfUsername, tfPassword, chkAfficher, tfPrenom, tfNom, tfEmail, tfDateNaissance, chkInfoRangUser, chkInfoRangAdmin, btnAnnuler, btnEnregistrerUpdate})
        );
        pnlUserInfos.setLayout(null);

        lblUsernameInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblUsernameInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUsernameInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblUsernameInfo.setText("Nom d'utilisateur");
        pnlUserInfos.add(lblUsernameInfo);
        lblUsernameInfo.setBounds(10, 20, 110, 15);

        tfUsername.setToolTipText("Identifiant");
        tfUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlUserInfos.add(tfUsername);
        tfUsername.setBounds(120, 10, 140, 30);

        tfPassword.setToolTipText("Mot de passe");
        tfPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlUserInfos.add(tfPassword);
        tfPassword.setBounds(120, 50, 140, 30);

        lblPasswordInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblPasswordInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPasswordInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblPasswordInfo.setText("Mot de passe");
        pnlUserInfos.add(lblPasswordInfo);
        lblPasswordInfo.setBounds(10, 60, 110, 15);

        lblPrenomInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblPrenomInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPrenomInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblPrenomInfo.setText("Prénom");
        pnlUserInfos.add(lblPrenomInfo);
        lblPrenomInfo.setBounds(10, 100, 110, 15);

        tfPrenom.setToolTipText("Prénom");
        tfPrenom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlUserInfos.add(tfPrenom);
        tfPrenom.setBounds(120, 90, 140, 30);

        lblNomInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblNomInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNomInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblNomInfo.setText("Nom");
        pnlUserInfos.add(lblNomInfo);
        lblNomInfo.setBounds(10, 140, 110, 15);

        tfNom.setToolTipText("Nom");
        tfNom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlUserInfos.add(tfNom);
        tfNom.setBounds(120, 130, 140, 30);

        lblEmailInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblEmailInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEmailInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblEmailInfo.setText("Email");
        pnlUserInfos.add(lblEmailInfo);
        lblEmailInfo.setBounds(10, 180, 110, 15);

        tfEmail.setToolTipText("Email");
        tfEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlUserInfos.add(tfEmail);
        tfEmail.setBounds(120, 170, 140, 30);

        lblDateNaissanceInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblDateNaissanceInfo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDateNaissanceInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblDateNaissanceInfo.setText("Date de naissance");
        pnlUserInfos.add(lblDateNaissanceInfo);
        lblDateNaissanceInfo.setBounds(10, 220, 110, 14);

        tfDateNaissance.setToolTipText("Date de naissance");
        tfDateNaissance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        pnlUserInfos.add(tfDateNaissance);
        tfDateNaissance.setBounds(120, 210, 140, 30);

        chkAfficher.setForeground(new java.awt.Color(255, 255, 255));
        chkAfficher.setText("afficher");
        chkAfficher.setToolTipText("afficher en toutes lettres le mdp");
        chkAfficher.setBorder(null);
        chkAfficher.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAfficherItemStateChanged(evt);
            }
        });
        pnlUserInfos.add(chkAfficher);
        chkAfficher.setBounds(10, 75, 70, 15);

        lblRangInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblRangInfo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRangInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblRangInfo.setText("Rang");
        pnlUserInfos.add(lblRangInfo);
        lblRangInfo.setBounds(10, 255, 110, 14);

        chkInfoRangAdmin.setBackground(new java.awt.Color(102, 102, 102));
        chkInfoRangAdmin.setForeground(new java.awt.Color(153, 0, 0));
        chkInfoRangAdmin.setText("Admin");
        pnlUserInfos.add(chkInfoRangAdmin);
        chkInfoRangAdmin.setBounds(200, 250, 60, 23);

        chkInfoRangUser.setBackground(new java.awt.Color(102, 102, 102));
        chkInfoRangUser.setForeground(new java.awt.Color(0, 204, 255));
        chkInfoRangUser.setText("User");
        pnlUserInfos.add(chkInfoRangUser);
        chkInfoRangUser.setBounds(120, 250, 50, 23);

        pnlModifyUser.add(pnlUserInfos);
        pnlUserInfos.setBounds(20, 115, 270, 280);

        btnEnregistrerUpdate.setText("Enregistrer les modifications");
        btnEnregistrerUpdate.setToolTipText("Valider les modifications");
        btnEnregistrerUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnregistrerUpdateActionPerformed(evt);
            }
        });
        pnlModifyUser.add(btnEnregistrerUpdate);
        btnEnregistrerUpdate.setBounds(100, 400, 190, 23);

        btnModifyUser.setText("Modifier l'utilisateur");
        btnModifyUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyUserActionPerformed(evt);
            }
        });
        pnlModifyUser.add(btnModifyUser);
        btnModifyUser.setBounds(20, 230, 270, 50);

        btnAnnuler.setText("Annuler");
        btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnulerActionPerformed(evt);
            }
        });
        pnlModifyUser.add(btnAnnuler);
        btnAnnuler.setBounds(20, 400, 70, 23);

        pnlUpdateUser.add(pnlModifyUser);

        tabPanAdmin.addTab("Créer/Modifier un utilisateur", pnlUpdateUser);

        getContentPane().add(tabPanAdmin);
        tabPanAdmin.setBounds(0, 130, 630, 490);
        getContentPane().add(lblPassword);
        lblPassword.setBounds(300, 10, 0, 0);

        btnAccesUser.setText("Accéder à l'interface utilisateur");
        btnAccesUser.setToolTipText("Accès au GUI utilisateur");
        btnAccesUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccesUserActionPerformed(evt);
            }
        });
        getContentPane().add(btnAccesUser);
        btnAccesUser.setBounds(403, 7, 210, 23);
        getContentPane().add(lblAdmin);
        lblAdmin.setBounds(344, 10, 0, 0);

        chkRemember.setEnabled(false);
        getContentPane().add(chkRemember);
        chkRemember.setBounds(120, 190, 0, 10);

        imgBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg_frmMainMenuAdminBanniere.jpg"))); // NOI18N
        getContentPane().add(imgBackGround);
        imgBackGround.setBounds(0, 0, 626, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlanningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlanningActionPerformed
        if (isComboBoxValid(cbClubs, imgErrorModify, lblErreur, TXT_CB_CLUB_ERROR)) {
            Club c = lstClubs.get(cbClubs.getSelectedIndex());
            if (frmListCours == null) {
                try {
                    frmListCours = new FrmLstCours(this, uCourant, c);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
                frmListCours.setVisible(true);
                frmListCours.setRememberState(getRememberState()); // test de la fonction "Se souvenir de moi"
            }
            this.dispose();
        }
    }//GEN-LAST:event_btnPlanningActionPerformed

    private void btnDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeconnexionActionPerformed
        try {
            FrmLogin frmLogin = new FrmLogin();
            if (getRememberState() == true) {
                frmLogin.setUser(uCourant.getUsername());
                frmLogin.setPass(uCourant.getPassword());
            }
            frmLogin.setRememberState(getRememberState());
            frmLogin.setVisible(true);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        this.dispose();
    }//GEN-LAST:event_btnDeconnexionActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        FrmQuit frmQuit = new FrmQuit(this, true, uCourant);
        frmQuit.setPar(this);
        frmQuit.setRememberState(getRememberState());
        frmQuit.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void btnAccesUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccesUserActionPerformed
        this.dispose();
        if (frmMainUser == null) {
            try {
                frmMainUser = new FrmMainMenuUser(this, uCourant);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            frmMainUser.setVisible(true);
            frmMainUser.setRememberState(getRememberState()); // test de la fonction "Se souvenir de moi"
        }
    }//GEN-LAST:event_btnAccesUserActionPerformed

    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
        try {
            if (isCreateFieldsValid()) {
                lblConfirmationUser.setForeground(Color.LIGHT_GRAY);
                lblConfirmationUser.setText(TXT_USER_CONFIRM);
                imgErrorUser.setVisible(false);
                imgConfirmationUser.setVisible(true);
                lblConfirmationUser.setVisible(true);
                Date dateNaissance = null;
                dateNaissance = sdf.parse(DEFAULT_BIRTHDATE);
                Date dateInscription = new Date(); // date de création de l'utilisateur
                Utilisateur u = new Utilisateur(tfNewUser.getText(), tfNewPass.getText(), dateNaissance, dateInscription, chkNewRangAdmin.isSelected() ? true : false);
                lstUtilisateurs.add(u);
                try {
                    UtilisateurDAO.quickInsert(u);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        tfNewUser.setText("");
        tfNewPass.setText("");
        tfNewPassConfirm.setText("");
        chkNewRangAdmin.setSelected(false);
        chkNewRangUser.setSelected(false);
    }//GEN-LAST:event_btnCreateUserActionPerformed

    private void btnEnregistrerUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnregistrerUpdateActionPerformed
        if (isModifyFieldsValid()) {
            pnlUserInfos.setVisible(false);
            btnModifyUser.setVisible(true);
            btnEnregistrerUpdate.setVisible(false);
            cbListUsers.setEnabled(true);
            lblConfirmationUser.setText(TXT_USER_CONFIRM);
            imgErrorUser.setVisible(false);
            imgConfirmationUser.setVisible(true);
            lblConfirmationUser.setVisible(true);
            btnAnnuler.setVisible(false);
            Utilisateur u = lstUtilisateurs.get(cbListUsers.getSelectedIndex());
            u.setUsername(tfUsername.getText());
            u.setPassword(tfPassword.getText());
            u.setNom(tfNom.getText());
            u.setPrenom(tfPrenom.getText());
            u.setEmail(tfEmail.getText());
            u.setIsAdmin(chkInfoRangAdmin.isSelected());
            try {
                u.setDateNaissance(sdf.parse(tfDateNaissance.getText()));
                UtilisateurDAO.update(u.getNo(), u.getUsername(), u.getPassword(), u.getNom(), u.getPrenom(), u.getDateNaissance(), u.getEmail(), u.getIsAdmin());
            } catch (ParseException ex) {
                ex.printStackTrace();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnEnregistrerUpdateActionPerformed

    private void btnValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValiderActionPerformed
        if (tfNbInscrits.getText().length() == 0) {
            lblCoursModified.setText(TXT_NB_MAX_ERROR);
            lblCoursModified.setForeground(Color.red);
            lblCoursModified.setVisible(true);
            imgErrorUpdate.setVisible(true);
            return;
        }
        if (isComboBoxValid(cbCours, imgErrorUpdate, lblCoursModified, TXT_CB_COURS_ERROR)) {
            lblCoursModified.setText(TXT_COURS_MODIFIED);
            lblCoursModified.setForeground(Color.cyan);
            imgCoursModified.setVisible(true);
            lblCoursModified.setVisible(true);
            imgErrorUpdate.setVisible(false);
            Cours c = lstCours.get(cbCours.getSelectedIndex());
            try {
                CoursDAO.updateParticipants(c.getNo(), Integer.parseInt(tfNbInscrits.getText()));
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnValiderActionPerformed

    private void btnSupprimerCoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupprimerCoursActionPerformed
        if (isComboBoxValid(cbCoursDelete, imgErrorDelete, lblConfirmationDelete, TXT_CB_COURS_ERROR)) {
            Cours c = lstCours.get(cbCoursDelete.getSelectedIndex());
            imgConfirmationDelete.setVisible(true);
            lblConfirmationDelete.setForeground(Color.CYAN);
            lblConfirmationDelete.setText(TXT_COURS_DELETE);
            lblConfirmationDelete.setVisible(true);
            cbCoursDelete.removeItemAt(cbCoursDelete.getSelectedIndex());
            cbCoursDelete.setSelectedIndex(-1);
            lstCours.remove(c);
            try {
                CoursDAO.delete(c.getNo());
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnSupprimerCoursActionPerformed

    private void btnModifyUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyUserActionPerformed
        Utilisateur user = lstUtilisateurs.get(cbListUsers.getSelectedIndex());
        pnlUserInfos.setVisible(true);
        btnModifyUser.setVisible(false);
        btnEnregistrerUpdate.setVisible(true);
        btnAnnuler.setVisible(true);
        lblConfirmationUser.setVisible(false);
        imgConfirmationUser.setVisible(false);
        tfUsername.setText(user.getUsername());
        tfPassword.setText(user.getPassword());
        tfNom.setText(user.getNom());
        tfPrenom.setText(user.getPrenom());
        tfEmail.setText(user.getEmail());
        if (user.getIsAdmin()) {
            chkInfoRangAdmin.setSelected(true);
        } else {
            chkInfoRangUser.setSelected(true);
        }
        tfDateNaissance.setText(sdf.format(user.getDateNaissance()));
        cbListUsers.setEnabled(false);
    }//GEN-LAST:event_btnModifyUserActionPerformed

    private void chkAfficherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAfficherItemStateChanged
        if (chkAfficher.isSelected()) {
            tfPassword.setEchoChar((char) 0);
        } else {
            tfPassword.setEchoChar('*');
        }
    }//GEN-LAST:event_chkAfficherItemStateChanged

    private void tfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfKeyTyped
        imgConfirmationUser.setVisible(false);
        imgErrorUser.setVisible(false);
        lblConfirmationUser.setVisible(false);
    }//GEN-LAST:event_tfKeyTyped

    private void cbCoursDeleteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCoursDeleteItemStateChanged
        setErrorDisplay(imgErrorDelete, lblConfirmationDelete, false);
        setErrorDisplay(imgConfirmationDelete, lblConfirmationDelete, false);
    }//GEN-LAST:event_cbCoursDeleteItemStateChanged

    private void cbCoursItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCoursItemStateChanged
        setErrorDisplay(lblCoursModified, imgErrorUpdate, false);
    }//GEN-LAST:event_cbCoursItemStateChanged

    private void tfNbInscritsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNbInscritsKeyPressed
        setErrorDisplay(lblCoursModified, imgErrorUpdate, false);
    }//GEN-LAST:event_tfNbInscritsKeyPressed

    private void btnAjouterCoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjouterCoursActionPerformed
        if (isCoursAddFieldsValide() && isCalValide(calDateCoursAdd, imgErrorAdd, lblConfirmationAdd, TXT_DATE_SELECT_ERROR)) {
            lblConfirmationAdd.setForeground(Color.cyan);
            lblConfirmationAdd.setText(TXT_COURS_ADD);
            setErrorDisplay(lblConfirmationAdd, imgErrorAdd, false);
            String horaire = cbHeureCours.getSelectedItem() + "h" + cbMinuteCours.getSelectedItem();
            Club clu = lstClubs.get(cbClubsAdd.getSelectedIndex());
            Coach coach = lstCoachs.get(cbCoachsAdd.getSelectedIndex());
            Cours c = new Cours(tfNomCoursAdd.getText(), calDateCoursAdd.getDate(), horaire, coach, Integer.parseInt(tfNbMaxParticipantsAdd.getText()), clu.getNo());
            lstCours.add(c);
            try {
                CoursDAO.insert(c);
                loadCours();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            tfNomCoursAdd.setText("");
            calDateCoursAdd.setDate(null);
            tfNbMaxParticipantsAdd.setText("");
            cbHeureCours.setSelectedIndex(-1);
            cbMinuteCours.setSelectedIndex(-1);
            cbClubsAdd.setSelectedIndex(-1);
            cbCoachsAdd.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_btnAjouterCoursActionPerformed

    private void calDateCoursAddPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calDateCoursAddPropertyChange
        setMinDate(calDateCoursAdd);
        setErrorDisplay(lblConfirmationAdd, imgErrorAdd, false);

    }//GEN-LAST:event_calDateCoursAddPropertyChange

    private void btnAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnulerActionPerformed
        pnlUserInfos.setVisible(false);
        cbListUsers.setEnabled(true);
        btnEnregistrerUpdate.setVisible(false);
        btnModifyUser.setVisible(true);
        btnAnnuler.setVisible(false);
    }//GEN-LAST:event_btnAnnulerActionPerformed

    private void tfNomCoursAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNomCoursAddFocusGained
        setErrorDisplay(lblConfirmationAdd, imgErrorAdd, false);

    }//GEN-LAST:event_tfNomCoursAddFocusGained

    private void cbHeureCoursItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbHeureCoursItemStateChanged
        setErrorDisplay(lblConfirmationAdd, imgErrorAdd, false);
    }//GEN-LAST:event_cbHeureCoursItemStateChanged

    private void cbAddItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbAddItemStateChanged
        setErrorDisplay(lblConfirmationAdd, imgErrorAdd, false);
    }//GEN-LAST:event_cbAddItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMainMenuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmMainMenuAdmin(new javax.swing.JFrame(), uCourant).setVisible(true);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccesUser;
    private javax.swing.JButton btnAjouterCours;
    private javax.swing.JButton btnAnnuler;
    private javax.swing.JButton btnCreateUser;
    private javax.swing.JButton btnDeconnexion;
    private javax.swing.JButton btnEnregistrerUpdate;
    private javax.swing.JButton btnModifyUser;
    private javax.swing.JButton btnPlanning;
    private javax.swing.JButton btnSupprimerCours;
    private javax.swing.JButton btnValider;
    private com.toedter.calendar.JDateChooser calDateCoursAdd;
    private javax.swing.JComboBox<String> cbClubs;
    private javax.swing.JComboBox<String> cbClubsAdd;
    private javax.swing.JComboBox<String> cbCoachsAdd;
    private javax.swing.JComboBox<String> cbCours;
    private javax.swing.JComboBox<String> cbCoursDelete;
    private javax.swing.JComboBox<String> cbHeureCours;
    private javax.swing.JComboBox<String> cbListUsers;
    private javax.swing.JComboBox<String> cbMinuteCours;
    private javax.swing.JCheckBox chkAfficher;
    private javax.swing.JRadioButton chkInfoRangAdmin;
    private javax.swing.JRadioButton chkInfoRangUser;
    private javax.swing.JRadioButton chkNewRangAdmin;
    private javax.swing.JRadioButton chkNewRangUser;
    private javax.swing.JCheckBox chkRemember;
    private javax.swing.JLabel imgBackGround;
    private javax.swing.JLabel imgConfirmationDelete;
    private javax.swing.JLabel imgConfirmationUser;
    private javax.swing.JLabel imgCoursModified;
    private javax.swing.JLabel imgErrorAdd;
    private javax.swing.JLabel imgErrorDelete;
    private javax.swing.JLabel imgErrorModify;
    private javax.swing.JLabel imgErrorUpdate;
    private javax.swing.JLabel imgErrorUser;
    private javax.swing.JLabel imgLogoBarbell;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel lbNomCoursAdd;
    private javax.swing.JLabel lblAdmin;
    private javax.swing.JLabel lblBienvenue;
    private javax.swing.JLabel lblClubCoursAdd;
    private javax.swing.JLabel lblCoachCoursAdd;
    private javax.swing.JLabel lblConfirmationAdd;
    private javax.swing.JLabel lblConfirmationDelete;
    private javax.swing.JLabel lblConfirmationUser;
    private javax.swing.JLabel lblCoursDelete;
    private javax.swing.JLabel lblCoursModified;
    private javax.swing.JLabel lblDateCoursAdd;
    private javax.swing.JLabel lblDateNaissanceInfo;
    private javax.swing.JLabel lblEmailInfo;
    private javax.swing.JLabel lblErreur;
    private javax.swing.JLabel lblHeureCoursAdd;
    private javax.swing.JLabel lblModifyUser;
    private javax.swing.JLabel lblNbMaxPartCoursAdd;
    private javax.swing.JLabel lblNewNbInscr;
    private javax.swing.JLabel lblNewPass;
    private javax.swing.JLabel lblNewPassConfirm;
    private javax.swing.JLabel lblNewRang;
    private javax.swing.JLabel lblNewUser;
    private javax.swing.JLabel lblNomInfo;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPasswordInfo;
    private javax.swing.JLabel lblPrenomInfo;
    private javax.swing.JLabel lblRangInfo;
    private javax.swing.JLabel lblSelectClub;
    private javax.swing.JLabel lblSelectCours;
    private javax.swing.JLabel lblSelectUser;
    private javax.swing.JLabel lblTitleNewUser;
    private javax.swing.JLabel lblTitre;
    private javax.swing.JLabel lblTitreModifyClub;
    private javax.swing.JLabel lblTitreModifyClub2;
    private javax.swing.JLabel lblTitreNbMax;
    private javax.swing.JLabel lblTitreNbMax2;
    private javax.swing.JLabel lblUsernameInfo;
    private javax.swing.JPanel pnlAddCours;
    private javax.swing.JPanel pnlAddDeleteCours;
    private javax.swing.JPanel pnlCreateUser;
    private javax.swing.JPanel pnlDeleteCours;
    private javax.swing.JPanel pnlModifyUser;
    private javax.swing.JPanel pnlUpdateNbMaxInscr;
    private javax.swing.JPanel pnlUpdatePlanning;
    private javax.swing.JPanel pnlUpdateUser;
    private javax.swing.JPanel pnlUserInfos;
    private javax.swing.JTabbedPane tabPanAdmin;
    private javax.swing.JTextField tfDateNaissance;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfNbInscrits;
    private javax.swing.JTextField tfNbMaxParticipantsAdd;
    private javax.swing.JPasswordField tfNewPass;
    private javax.swing.JPasswordField tfNewPassConfirm;
    private javax.swing.JTextField tfNewUser;
    private javax.swing.JTextField tfNom;
    private javax.swing.JTextField tfNomCoursAdd;
    private javax.swing.JPasswordField tfPassword;
    private javax.swing.JTextField tfPrenom;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables

    /**
     * Méthode qui valide la sélection d'une date dans le JDateChooser (si null,
     * alors erreur sinon, return true).
     */
    private boolean isCalValide(JDateChooser jCal, JLabel img, JLabel lbl, String txt) {
        if (jCal.getDate() == null) {
            img.setVisible(true);
            lbl.setForeground(Color.red);
            lbl.setText(txt);
            lbl.setVisible(true);
            return false;
        }
        return true;
    }

    /**
     * Méthode qui valide une ComboBox selon la condition "si un élément est
     * sélectionné alors je return true, sinon j'affiche un msg d'erreur".
     */
    private boolean isComboBoxValid(JComboBox cb, JLabel img, JLabel lbl, String txt) {
        if (cb.getSelectedIndex() == -1) {
            img.setVisible(true);
            lbl.setForeground(Color.red);
            lbl.setText(txt);
            lbl.setVisible(true);
            return false;
        }
        return true;
    }

    /**
     * Méthode qui valide tous les textfields qui concernent la création d'un
     * nouvel utilisateur.
     */
    private boolean isCreateFieldsValid() throws ParseException {
        lblConfirmationUser.setForeground(Color.red);
        imgErrorUser.setVisible(true);
        imgConfirmationUser.setVisible(false);
        Date dateNaissance = sdf.parse(DEFAULT_BIRTHDATE);
        Date dateInscription = new Date(); // date de création de l'utilisateur
        Utilisateur u = new Utilisateur(tfNewUser.getText(), tfNewPass.getText(), dateNaissance, dateInscription, chkNewRangAdmin.isSelected() ? true : false);
        if (tfNewUser.getText().length() == 0 || tfNewPass.getText().length() == 0 || tfNewPassConfirm.getText().length() == 0) {
            lblConfirmationUser.setText(TXT_FIELD_ERROR);
            lblConfirmationUser.setVisible(true);
            return false;
        }
        if (!tfNewUser.getText().trim().matches(LETTER_REGEX_PATTERN)) {
            lblConfirmationUser.setText(TXT_USER_ERROR);
            lblConfirmationUser.setVisible(true);
            return false;
        }
        if (!tfNewPass.getText().equals(tfNewPassConfirm.getText())) {
            lblConfirmationUser.setText(TXT_PASS_ERROR);
            lblConfirmationUser.setVisible(true);
            return false;
        }
        if (!chkNewRangUser.isSelected() && !chkNewRangAdmin.isSelected()) {
            lblConfirmationUser.setText(TXT_RANG_ERROR);
            lblConfirmationUser.setVisible(true);
            return false;
        }
        for (int i = 0; i < lstUtilisateurs.size(); i++) {
            if (lstUtilisateurs.get(i).getUsername().equals(u.getUsername())) {
                lblConfirmationUser.setText(TXT_EXISTING_USER_ERROR);
                lblConfirmationUser.setVisible(true);
                return false;
            }
        }
        return true;
    }

    /**
     * Méthode de validation générale pour tous les textfields qui concernent la
     * modification d'un utilisateur existant.
     */
    private boolean isModifyFieldsValid() {
        EmailValidator emailValidator = new EmailValidator();
        lblConfirmationUser.setForeground(Color.red);
        imgErrorUser.setVisible(true);
        lblConfirmationUser.setVisible(true);
        if (tfPassword.getText().length() == 0 || tfPrenom.getText().length() == 0 || tfNom.getText().length() == 0 || tfEmail.getText().length() == 0 || tfDateNaissance.getText().length() == 0) {
            lblConfirmationUser.setText(TXT_FIELD_ERROR);
            lblConfirmationUser.setVisible(true);
            return false;
        }
        if (!emailValidator.validate(tfEmail.getText().trim())) {
            lblConfirmationUser.setText(TXT_EMAIL_ERROR);
            lblConfirmationUser.setVisible(true);
            return false;
        }
        if (!checkDate()) {
            lblConfirmationUser.setText(TXT_BIRTHDATE_ERROR);
            lblConfirmationUser.setVisible(true);
            return false;
        }
        return true;
    }

    /**
     * Méthode qui valide une date de naissance.
     */
    private boolean checkDate() {
        String dateText = tfDateNaissance.getText();
        if (dateText.length() < 10) { // si l'utilisateur est en train de rentrer une date et n'a pas terminé (le format prend 10 caractères) alors on return false
            tfDateNaissance.setText("");
            return false;
        }
        try {
            int day = Integer.parseInt(dateText.substring(0, 2));
            int month = Integer.parseInt(dateText.substring(3, 5));
            int year = Integer.parseInt(dateText.substring(6, 10));
            if (day <= 31 && month <= 12 && year >= 1900 && year <= 2099) {
                Date d = sdf.parse(dateText);
                Date now = new Date();
                long diff = now.getTime() - d.getTime();
                if (diff > 0) {
                    tfDateNaissance.setForeground(Color.black);
                    return true;
                }
            }
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        tfDateNaissance.setText("");
        return false;
    }

    /**
     * Méthode qui gère la configuration initiale de la fenêtre (celle au
     * chargement de l'application).
     */
    private void setStartUpConfig() {
        loadCoursHoraires();
        lblBienvenue.setText("Bienvenue " + uCourant);
        imgErrorUser.setVisible(false);
        imgErrorDelete.setVisible(false);
        imgErrorAdd.setVisible(false);
        imgConfirmationUser.setVisible(false);
        lblConfirmationUser.setVisible(false);
        imgCoursModified.setVisible(false);
        imgErrorModify.setVisible(false);
        imgErrorUpdate.setVisible(false);
        imgConfirmationDelete.setVisible(false);
        pnlUserInfos.setVisible(false);
        btnEnregistrerUpdate.setVisible(false);
        btnAnnuler.setVisible(false);
        cbClubs.setSelectedIndex(-1);
        cbCours.setSelectedIndex(-1);
        cbCoursDelete.setSelectedIndex(-1);
        cbListUsers.setSelectedIndex(-1);
        cbCoachsAdd.setSelectedIndex(-1);
        cbHeureCours.setSelectedIndex(-1);
        cbMinuteCours.setSelectedIndex(-1);
        ButtonGroup chkBoxGrp1 = new ButtonGroup();
        chkBoxGrp1.add(chkNewRangUser);
        chkBoxGrp1.add(chkNewRangAdmin);
        ButtonGroup chkBoxGrp2 = new ButtonGroup();
        chkBoxGrp2.add(chkInfoRangUser);
        chkBoxGrp2.add(chkInfoRangAdmin);
    }

    /**
     * Méthode qui gère l'état de la checkbox "chkRemember" pour implanter la
     * fonctionnalité "se souvenir de moi" lors du login de l'utilisateur.
     */
    public void setRememberState(boolean state) {
        this.isRememberChecked = state;
        this.chkRemember.setSelected(state);
    }

    /**
     * Méthode qui retourne l'état de la checkbox "chkRemember".
     */
    public boolean getRememberState() {
        return isRememberChecked;
    }

    /**
     * Méthode permettant de set une date minimum sélectionnable dans le
     * calendrier.
     */
    private void setMinDate(JDateChooser dc) {
        Date d = new Date();
        dc.setMinSelectableDate(d);
    }

    /**
     * Méthode permettant la validation du formulaire selon plusieurs critères.
     * soit : contrôle que tous les champs soient bien remplis, les mots de
     * passes doivent correspondre et l'e-mail doit respecter les standards du
     * REGEX (classe EmailValidator.java)
     */
    private boolean isCoursAddFieldsValide() {
        if (tfNomCoursAdd.getText().length() == 0 || tfNbMaxParticipantsAdd.getText().length() == 0) {
            setError(lblConfirmationAdd, TXT_FIELD_ERROR);
            setErrorDisplay(lblConfirmationAdd, imgErrorAdd, true);
            return false;
        }
        if (tfNomCoursAdd.getText().trim().matches(DIGIT_REGEX_PATTERN)) {
            setError(lblConfirmationAdd, TXT_ADD_NAME_ERROR);
            setErrorDisplay(lblConfirmationAdd, imgErrorAdd, true);
            return false;
        }

        if (cbHeureCours.getSelectedIndex() == -1 || cbMinuteCours.getSelectedIndex() == -1) {
            setError(lblConfirmationAdd, TXT_ADD_HOUR_ERROR);
            setErrorDisplay(lblConfirmationAdd, imgErrorAdd, true);
            return false;
        }
        if (cbCoachsAdd.getSelectedIndex() == -1) {
            setError(lblConfirmationAdd, TXT_ADD_COACH_ERROR);
            setErrorDisplay(lblConfirmationAdd, imgErrorAdd, true);
            return false;
        }
        if (tfNbMaxParticipantsAdd.getText().trim().matches(LETTER_REGEX_PATTERN) || Integer.parseInt(tfNbMaxParticipantsAdd.getText()) > 30) {
            setError(lblConfirmationAdd, TXT_ADD_PART_ERROR);
            setErrorDisplay(lblConfirmationAdd, imgErrorAdd, true);
            return false;
        }
        return true;
    }

    /**
     * Méthode purement réutilisable pour afficher ou cacher le label d'erreur
     * ou de validation après correction de l'utilisateur sur un texfield.
     */
    private void setErrorDisplay(JLabel lblErreur, JLabel imgError, boolean isShowing) {
        lblErreur.setVisible(isShowing);
        imgError.setVisible(isShowing);
    }

    /**
     * Méthode purement réutilisable pour assigner un message d'erreur à un
     * label.
     */
    private void setError(JLabel lblErreur, String txtErreur) {
        lblErreur.setText(txtErreur);
    }

    private void loadCoursHoraires() {
        for (int i = 6; i <= 21; i++) { // boucle pour remplir la combobox des heures (de 6h à 21h uniquement)
            if (i < 10) {
                cbHeureCours.addItem("0" + i);
            } else {
                cbHeureCours.addItem("" + i);
            }
        }
        for (int k = 0; k <= 59; k += 15) { // boucle pour remplir la combobox des minutes (chaque 15 min au choix)
            if (k < 10) {
                cbMinuteCours.addItem("0" + k);
            } else {
                cbMinuteCours.addItem("" + k);
            }
        }
    }

    /**
     * Méthode qui charge l'ArrayList des clubs.
     */
    private void loadClubs() throws SQLException {
        cbClubs.removeAllItems();
        cbClubsAdd.removeAllItems();
        lstClubs = ClubDAO.getClubs();
        for (int i = 0; i < lstClubs.size(); i++) {
            cbClubs.addItem(lstClubs.get(i).toString());
            cbClubsAdd.addItem(lstClubs.get(i).toString());
        }
    }

    /**
     * Méthode qui charge l'ArrayList des utilisateurs.
     */
    private void loadUsers() throws SQLException {
        cbListUsers.removeAllItems();
        lstUtilisateurs = UtilisateurDAO.getUsers();
        for (int i = 0; i < lstUtilisateurs.size(); i++) {
            cbListUsers.addItem(lstUtilisateurs.get(i).toString());
        }
    }

    /**
     * Méthode qui charge l'ArrayList des cours.
     */
    private void loadCours() throws SQLException {
        cbCours.removeAllItems();
        cbCoursDelete.removeAllItems();
        Club c = lstClubs.get(cbClubs.getSelectedIndex());
        lstCours = CoursDAO.getCours();
        for (int i = 0; i < lstCours.size(); i++) {
            cbCours.addItem(lstCours.get(i).toString());
            cbCoursDelete.addItem(lstCours.get(i).toString());
        }
    }

    private void loadCoachs() throws SQLException {
        lstCoachs = CoachDAO.getCoachs();
        for (Coach c : lstCoachs) {
            cbCoachsAdd.addItem(c.toString());
        }
    }
}
