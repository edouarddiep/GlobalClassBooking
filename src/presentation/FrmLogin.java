/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import base.UtilisateurDAO;
import domaine.Cours;
import domaine.Utilisateur;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;

/**
 *
 * @author Edouard Diep
 */
public class FrmLogin extends javax.swing.JFrame {

    private static final String TXT_USER = "Nom d'utilisateur";
    private static final String TXT_PASSWORD = "Mot de passe";
    private static final String TXT_ERROR_LOGIN = "Erreur : Le nom d'utilisateur ou le mot de passe n'est pas reconnu !";
    private static final String TXT_ERROR_FIELD = "Erreur : Veuillez remplir tous les champs !";
    private FrmMainMenuUser frmMainUser;
    private FrmMainMenuAdmin frmMainAdmin;
    private boolean isRememberChecked;

    private ArrayList<Utilisateur> lstUtilisateurs;

    /**
     * Creates new form FrmTest
     */
    /*
     */
    public FrmLogin() throws SQLException {
        initComponents();
        loadUsers();
        requestFocusInWindow();
        setStartUpConfig(); // setter de la configuration initiale lors de l'ouverture de la fenêtre de l'application
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblLogin = new javax.swing.JLabel();
        tfUser = new javax.swing.JTextField();
        tfPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        chkRemember = new javax.swing.JCheckBox();
        btnPassForgot = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        lblErreur = new javax.swing.JLabel();
        btnQuitter = new javax.swing.JButton();
        imgErreur = new javax.swing.JLabel();
        imgBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Accueil");
        setFocusTraversalPolicy(new MyFocusTraversalPolicy(new Component[] {tfUser, tfPassword, chkRemember, btnLogin, btnRegister, btnPassForgot, btnQuitter})
        );
        setLocation(new java.awt.Point(700, 250));
        setMaximumSize(new java.awt.Dimension(527, 400));
        setMinimumSize(new java.awt.Dimension(527, 400));
        setName("FrmLogin"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(604, 401));
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Malgun Gothic", 1, 28)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Bienvenue sur GlobalClassBooking");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(30, 20, 480, 49);

        lblLogin.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblLogin.setForeground(new java.awt.Color(255, 255, 255));
        lblLogin.setText("Veuillez vous identifier :");
        getContentPane().add(lblLogin);
        lblLogin.setBounds(150, 90, 250, 30);

        tfUser.setForeground(java.awt.Color.lightGray);
        tfUser.setText("Nom d'utilisateur");
        tfUser.setToolTipText("Identifiant");
        tfUser.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfUser.setName("tfUser"); // NOI18N
        tfUser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfUserFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfUserFocusLost(evt);
            }
        });
        tfUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfUserMouseClicked(evt);
            }
        });
        tfUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfUserKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfUserKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        getContentPane().add(tfUser);
        tfUser.setBounds(120, 130, 280, 20);

        tfPassword.setForeground(java.awt.Color.lightGray);
        tfPassword.setText("Mot de passe");
        tfPassword.setToolTipText("Mot de passe");
        tfPassword.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfPasswordFocusLost(evt);
            }
        });
        tfPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfPasswordMouseClicked(evt);
            }
        });
        tfPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPasswordKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPasswordKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        getContentPane().add(tfPassword);
        tfPassword.setBounds(120, 160, 280, 20);

        btnLogin.setBackground(new java.awt.Color(0, 51, 153));
        btnLogin.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(255, 51, 51));
        btnLogin.setText("Se connecter");
        btnLogin.setToolTipText("Se connecter à l'application");
        btnLogin.setName(""); // NOI18N
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        btnLogin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnLoginKeyPressed(evt);
            }
        });
        getContentPane().add(btnLogin);
        btnLogin.setBounds(120, 220, 280, 30);

        chkRemember.setBackground(new java.awt.Color(102, 102, 102));
        chkRemember.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkRemember.setForeground(new java.awt.Color(102, 255, 255));
        chkRemember.setText("Se souvenir de moi ?");
        chkRemember.setOpaque(false);
        chkRemember.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkRememberItemStateChanged(evt);
            }
        });
        chkRemember.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkRememberKeyPressed(evt);
            }
        });
        getContentPane().add(chkRemember);
        chkRemember.setBounds(120, 195, 150, 23);

        btnPassForgot.setText("Mot de passe oublié ?");
        btnPassForgot.setToolTipText("Réinitialiser le mot de passe");
        btnPassForgot.setActionCommand("Mot de passe oublié");
        btnPassForgot.setBorder(null);
        btnPassForgot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPassForgotActionPerformed(evt);
            }
        });
        getContentPane().add(btnPassForgot);
        btnPassForgot.setBounds(270, 260, 130, 20);

        btnRegister.setBackground(new java.awt.Color(204, 204, 204));
        btnRegister.setText("Inscription");
        btnRegister.setToolTipText("S'enregistrer sur l'application");
        btnRegister.setBorder(null);
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegister);
        btnRegister.setBounds(120, 260, 80, 20);

        lblErreur.setBackground(new java.awt.Color(255, 255, 255));
        lblErreur.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblErreur.setForeground(new java.awt.Color(255, 0, 0));
        lblErreur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblErreur.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblErreur.setOpaque(true);
        getContentPane().add(lblErreur);
        lblErreur.setBounds(10, 320, 490, 20);

        btnQuitter.setText("Quitter l'application");
        btnQuitter.setToolTipText("Quitter l'application");
        btnQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitterActionPerformed(evt);
            }
        });
        getContentPane().add(btnQuitter);
        btnQuitter.setBounds(0, 340, 140, 23);

        imgErreur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img_Warning.png"))); // NOI18N
        getContentPane().add(imgErreur);
        imgErreur.setBounds(220, 260, 70, 60);

        imgBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg_frmLogin.png"))); // NOI18N
        imgBackGround.setToolTipText("");
        imgBackGround.setMaximumSize(new java.awt.Dimension(520, 380));
        imgBackGround.setMinimumSize(new java.awt.Dimension(520, 380));
        imgBackGround.setPreferredSize(new java.awt.Dimension(520, 380));
        getContentPane().add(imgBackGround);
        imgBackGround.setBounds(0, -10, 530, 390);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void tfUserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfUserFocusGained
        if (!isFilledTF(tfUser, TXT_USER)) {
            setCaretTF(tfUser);
        }
    }//GEN-LAST:event_tfUserFocusGained

    private void tfUserFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfUserFocusLost
        addPlaceHolder(tfUser, TXT_USER);
    }//GEN-LAST:event_tfUserFocusLost

    private void tfPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPasswordFocusLost
        if (tfPassword.getText().length() == 0) {
            tfPassword.setEchoChar((char) 0);
        }
        addPlaceHolder(tfPassword, TXT_PASSWORD);
    }//GEN-LAST:event_tfPasswordFocusLost

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        if (isLoginValid()) {
            try {
                login();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        FrmRegister frmRegister;
        try {
            frmRegister = new FrmRegister(this, true);
            frmRegister.setVisible(true);
            loadUsers();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnPassForgotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPassForgotActionPerformed
        FrmPasswordForgotten frmPass;
        imgErreur.setVisible(false);
        lblErreur.setVisible(false);
        try {
            frmPass = new FrmPasswordForgotten(this, true);
            frmPass.setVisible(true);
            loadUsers();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnPassForgotActionPerformed

    private void btnQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitterActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_btnQuitterActionPerformed

    private void tfPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPasswordFocusGained
        if (!isFilledTF(tfPassword, TXT_PASSWORD)) {
            setCaretTF(tfPassword);
        }
    }//GEN-LAST:event_tfPasswordFocusGained

    private void tfPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPasswordKeyPressed
        tfPassword.setEchoChar('*');
        if (tfPassword.getText().equals(TXT_PASSWORD) && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || tfPassword.getText().equals(TXT_PASSWORD) && evt.getKeyCode() == KeyEvent.VK_DELETE) {
            tfPassword.setEchoChar((char) 0);
            evt.consume();
            return;
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (isLoginValid()) {
                try {
                    login();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                evt.consume();
            }
        }
        removePlaceHolder(tfPassword, TXT_PASSWORD);
    }//GEN-LAST:event_tfPasswordKeyPressed

    private void chkRememberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkRememberKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (isLoginValid()) {
                try {
                    login();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                evt.consume();
            }
        }
    }//GEN-LAST:event_chkRememberKeyPressed

    private void tfUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfUserKeyPressed
        if (tfUser.getText().equals(TXT_USER) && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || tfUser.getText().equals(TXT_USER) && evt.getKeyCode() == KeyEvent.VK_DELETE) {
            evt.consume();
            return;
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (isLoginValid()) {
                try {
                    login();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                evt.consume();
            }
        }
        removePlaceHolder(tfUser, TXT_USER);
    }//GEN-LAST:event_tfUserKeyPressed

    private void tfUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfUserMouseClicked
        if (!isFilledTF(tfUser, TXT_USER)) {
            setCaretTF(tfUser);
        }
    }//GEN-LAST:event_tfUserMouseClicked

    private void tfUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfUserKeyReleased
        if (tfUser.getText().length() == 0) {
            addPlaceHolder(tfUser, TXT_USER);
            tfUser.setCaretPosition(0);
        }
    }//GEN-LAST:event_tfUserKeyReleased

    private void tfPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPasswordKeyReleased
        if (tfPassword.getText().length() == 0) {
            tfPassword.setEchoChar((char) 0);
            addPlaceHolder(tfPassword, TXT_PASSWORD);
            tfPassword.setCaretPosition(0);
        }
    }//GEN-LAST:event_tfPasswordKeyReleased

    private void tfPasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfPasswordMouseClicked
        if (!isFilledTF(tfPassword, TXT_PASSWORD)) {
            setCaretTF(tfPassword);
        }
    }//GEN-LAST:event_tfPasswordMouseClicked

    private void btnLoginKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnLoginKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (isLoginValid()) {
                try {
                    login();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                evt.consume();
            }
        }
    }//GEN-LAST:event_btnLoginKeyPressed

    private void chkRememberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkRememberItemStateChanged
        if (!chkRemember.isSelected()) {
            tfUser.setText("");
            tfPassword.setText("");
            addPlaceHolder(tfUser, TXT_USER);
            addPlaceHolder(tfPassword, TXT_PASSWORD);
            tfPassword.setEchoChar((char) 0);
        }
    }//GEN-LAST:event_chkRememberItemStateChanged

    private void tfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfKeyTyped
        lblErreur.setVisible(false);
        imgErreur.setVisible(false);
    }//GEN-LAST:event_tfKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmLogin().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmLogin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnPassForgot;
    private javax.swing.JButton btnQuitter;
    private javax.swing.JButton btnRegister;
    private javax.swing.JCheckBox chkRemember;
    private javax.swing.JLabel imgBackGround;
    private javax.swing.JLabel imgErreur;
    private javax.swing.JLabel lblErreur;
    private javax.swing.JLabel lblLogin;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPasswordField tfPassword;
    private javax.swing.JTextField tfUser;
    // End of variables declaration//GEN-END:variables

    /**
     * Méthode permettant d'ajouter un placeHolder à un champ texte.
     */
    private void addPlaceHolder(JTextField tf, String str) {
        if (tf.getText().length() == 0) {
            tf.setText(str);
            tf.setForeground(Color.LIGHT_GRAY);
        }
    }

    /**
     * Méthode permettant d'enlever un placeHolder après qu'il ait été ajouté.
     */
    private void removePlaceHolder(JTextField tf, String str) {
        if (tf.getText().equals(str)) {
            tf.setText("");
            tf.setForeground(Color.black);
        }
    }

    /**
     * Méthode qui gère la fonction de "login" lors du clic de l'utilisateur sur
     * le btnLogin. Cette méthode est aussi utilisée sur des raccourcis clavier
     * pour déclencher la connexion de l'utilisateur sur l'application
     */
    private void login() throws SQLException {
        String username = tfUser.getText().toLowerCase();
        String password = tfPassword.getText();
        for (int i = 0; i < lstUtilisateurs.size(); i++) {
            String regUsername = lstUtilisateurs.get(i).getUsername().toLowerCase();
            String regPassword = lstUtilisateurs.get(i).getPassword();
            boolean isAdmin = lstUtilisateurs.get(i).getIsAdmin();
            if (username.equals(regUsername) && password.equals(regPassword)) {
                if (!isAdmin) {
                    if (frmMainUser == null) {
                        frmMainUser = new FrmMainMenuUser(this, userValid());
                        frmMainUser.setRememberState(chkRemember.isSelected()); // test de la fonction "Se souvenir de moi"
                        frmMainUser.setVisible(true);
                    }
                }
                else {
                    if (frmMainAdmin == null) {
                        frmMainAdmin = new FrmMainMenuAdmin(this, userValid());
                        frmMainAdmin.setRememberState(chkRemember.isSelected()); // test de la fonction "Se souvenir de moi"
                        frmMainAdmin.setVisible(true);
                    }
                }
            }
        }
        this.dispose();
    }

    private boolean isLoginValid() {
        Utilisateur uCourant = userValid();
        lblErreur.setForeground(Color.red);
        if (tfUser.getText().equals(TXT_USER) || tfPassword.getText().equals(TXT_PASSWORD)) {
            lblErreur.setLocation(120, 320);
            lblErreur.setSize(300, 20);
            lblErreur.setText(TXT_ERROR_FIELD);
            lblErreur.setVisible(true);
            imgErreur.setVisible(true);
            return false;
        }
        if (uCourant == null) { // je teste si la liste d'utilisateurs contient le nom d'utilisateur ET le mdp
            tfUser.setText("");
            tfPassword.setText("");
            tfPassword.setEchoChar((char) 0);
            addPlaceHolder(tfUser, TXT_USER);
            addPlaceHolder(tfPassword, TXT_PASSWORD);
            imgErreur.setVisible(true);
            lblErreur.setLocation(20, 320);
            lblErreur.setSize(480, 20);
            lblErreur.setText(TXT_ERROR_LOGIN);
            lblErreur.setVisible(true);
            return false;
        }
        return true;
    }

    /**
     * Méthode qui retourne un utilisateur VALIDE (c'est à dire qui est présent
     * dans la liste des utilisateurs et donc connu de la base de données).
     */
    private Utilisateur userValid() {
        String username = tfUser.getText().toLowerCase();
        String pwd = tfPassword.getText();
        Utilisateur u = new Utilisateur(username);
        int indice = lstUtilisateurs.indexOf(u); // j'utilise le equals que j'ai défini avec "username"
        if (indice > -1) {
            Utilisateur uValide = lstUtilisateurs.get(indice);
            if (pwd.equals(uValide.getPassword())) {
                return uValide;
            }
        }
        return null;
    }

    /**
     * Méthode qui set l'utilisateur reçu en paramètre et permet de récupérer
     * l'affichage du nom d'utilisateur dans le textfield "tfUser" avec le bon
     * formatage (si la case "chkRemember" est cochée).
     */
    public void setUser(String user) {
        this.tfUser.setText(user);
        this.tfUser.setForeground(Color.black);
    }

    /**
     * Méthode qui set le mot de passe reçu en paramètre dans le textfield
     * "tfPassword" et le formate afin de récupérer les données de l'utilisateur
     * connecté (si la case "chkRemember est cochée).
     */
    public void setPass(String password) {
        this.tfPassword.setText(password);
        this.tfPassword.setForeground(Color.black);
        this.tfPassword.setEchoChar('*');
    }

    /**
     * Méthode qui retourne le nom d'utilisateur stocké par le setter.
     */
    public String getUser() {
        return this.tfUser.getText();
    }

    /**
     * Méthode qui retourne le mot de passe stocké par le setter.
     */
    public String getPass() {
        return this.tfPassword.getText();
    }

    /**
     * Méthode qui gère la configuration initiale de la fenêtre (celle au
     * chargement de l'application).
     */
    private void setStartUpConfig() {
        tfPassword.setEchoChar((char) 0);
        imgErreur.setVisible(false);
        lblErreur.setVisible(false);
    }
    
    public void setLblConfirmation(String txt){
        lblErreur.setForeground(Color.blue);
        lblErreur.setText(txt);
        lblErreur.setVisible(true);
    }

    /**
     * Méthode permettant de valider si un champ texte est bien rempli pour la
     * validation des caret (curseur de sélection).
     */
    private boolean isFilledTF(JTextField tf, String txt) {
        if (tf.getText().length() > 0 && !tf.getText().equals(txt)) {
            return true;
        }
        return false;
    }

    /**
     * Méthode permettant de gérer la position et la couleur du caret pour un
     * champ texte.
     */
    private void setCaretTF(JTextField tf) {
        tf.setCaretPosition(0);
        tf.setCaretColor(Color.black);
    }

    /**
     * Méthode qui gère l'état de la checkbox "chkRemember" pour implanter la
     * fonctionnalité "se souvenir de moi" lors du login de l'utilisateur.
     */
    public void setRememberState(boolean state) {
        this.isRememberChecked = state;
        this.chkRemember.setSelected(state);
    }

    /**
     * Méthode qui retourne l'état de la checkbox "chkRemember".
     */
    public boolean getRememberState() {
        return isRememberChecked;
    }

    /**
     * Méthode qui charge l'ArrayList des utilisateurs.
     */
    private void loadUsers() throws SQLException {
        lstUtilisateurs = UtilisateurDAO.getUsers();
    }
}
